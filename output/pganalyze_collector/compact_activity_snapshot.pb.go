// Code generated by protoc-gen-go. DO NOT EDIT.
// source: compact_activity_snapshot.proto

package pganalyze_collector

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ! When changing this, also update mappings/wait_event_type.json
type Backend_WaitEventType int32

const (
	Backend_PG_WAIT_UNDEFINED      Backend_WaitEventType = 0
	Backend_PG_WAIT_LWLOCK_NAMED   Backend_WaitEventType = 1
	Backend_PG_WAIT_LWLOCK_TRANCHE Backend_WaitEventType = 2
	Backend_PG_WAIT_LOCK           Backend_WaitEventType = 3
	Backend_PG_WAIT_BUFFER_PIN     Backend_WaitEventType = 4
	Backend_PG_WAIT_LWLOCK         Backend_WaitEventType = 5
	Backend_PG_WAIT_ACTIVITY       Backend_WaitEventType = 6
	Backend_PG_WAIT_CLIENT         Backend_WaitEventType = 7
	Backend_PG_WAIT_EXTENSION      Backend_WaitEventType = 8
	Backend_PG_WAIT_IPC            Backend_WaitEventType = 9
	Backend_PG_WAIT_TIMEOUT        Backend_WaitEventType = 10
	Backend_PG_WAIT_IO             Backend_WaitEventType = 11
)

var Backend_WaitEventType_name = map[int32]string{
	0:  "PG_WAIT_UNDEFINED",
	1:  "PG_WAIT_LWLOCK_NAMED",
	2:  "PG_WAIT_LWLOCK_TRANCHE",
	3:  "PG_WAIT_LOCK",
	4:  "PG_WAIT_BUFFER_PIN",
	5:  "PG_WAIT_LWLOCK",
	6:  "PG_WAIT_ACTIVITY",
	7:  "PG_WAIT_CLIENT",
	8:  "PG_WAIT_EXTENSION",
	9:  "PG_WAIT_IPC",
	10: "PG_WAIT_TIMEOUT",
	11: "PG_WAIT_IO",
}

var Backend_WaitEventType_value = map[string]int32{
	"PG_WAIT_UNDEFINED":      0,
	"PG_WAIT_LWLOCK_NAMED":   1,
	"PG_WAIT_LWLOCK_TRANCHE": 2,
	"PG_WAIT_LOCK":           3,
	"PG_WAIT_BUFFER_PIN":     4,
	"PG_WAIT_LWLOCK":         5,
	"PG_WAIT_ACTIVITY":       6,
	"PG_WAIT_CLIENT":         7,
	"PG_WAIT_EXTENSION":      8,
	"PG_WAIT_IPC":            9,
	"PG_WAIT_TIMEOUT":        10,
	"PG_WAIT_IO":             11,
}

func (x Backend_WaitEventType) String() string {
	return proto.EnumName(Backend_WaitEventType_name, int32(x))
}

func (Backend_WaitEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0f94e9081e673de, []int{1, 0}
}

// ! When changing this, also update mappings/wait_event.json
type Backend_WaitEvent int32

const (
	Backend_WAIT_EVENT_UNKNOWN                                      Backend_WaitEvent = 0
	Backend_WAIT_EVENT_LWLOCK_SHMEM_INDEX_LOCK                      Backend_WaitEvent = 101
	Backend_WAIT_EVENT_LWLOCK_OID_GEN_LOCK                          Backend_WaitEvent = 102
	Backend_WAIT_EVENT_LWLOCK_XID_GEN_LOCK                          Backend_WaitEvent = 103
	Backend_WAIT_EVENT_LWLOCK_PROC_ARRAY_LOCK                       Backend_WaitEvent = 104
	Backend_WAIT_EVENT_LWLOCK_S_INVAL_READ_LOCK                     Backend_WaitEvent = 105
	Backend_WAIT_EVENT_LWLOCK_S_INVAL_WRITE_LOCK                    Backend_WaitEvent = 106
	Backend_WAIT_EVENT_LWLOCK_WAL_BUF_MAPPING_LOCK                  Backend_WaitEvent = 107
	Backend_WAIT_EVENT_LWLOCK_WAL_WRITE_LOCK                        Backend_WaitEvent = 108
	Backend_WAIT_EVENT_LWLOCK_CONTROL_FILE_LOCK                     Backend_WaitEvent = 109
	Backend_WAIT_EVENT_LWLOCK_CHECKPOINT_LOCK                       Backend_WaitEvent = 110
	Backend_WAIT_EVENT_LWLOCK_C_LOG_CONTROL_LOCK                    Backend_WaitEvent = 111
	Backend_WAIT_EVENT_LWLOCK_SUBTRANS_CONTROL_LOCK                 Backend_WaitEvent = 112
	Backend_WAIT_EVENT_LWLOCK_MULTI_XACT_GEN_LOCK                   Backend_WaitEvent = 113
	Backend_WAIT_EVENT_LWLOCK_MULTI_XACT_OFFSET_CONTROL_LOCK        Backend_WaitEvent = 114
	Backend_WAIT_EVENT_LWLOCK_MULTI_XACT_MEMBER_CONTROL_LOCK        Backend_WaitEvent = 115
	Backend_WAIT_EVENT_LWLOCK_REL_CACHE_INIT_LOCK                   Backend_WaitEvent = 116
	Backend_WAIT_EVENT_LWLOCK_CHECKPOINTER_COMM_LOCK                Backend_WaitEvent = 117
	Backend_WAIT_EVENT_LWLOCK_TWO_PHASE_STATE_LOCK                  Backend_WaitEvent = 118
	Backend_WAIT_EVENT_LWLOCK_TABLESPACE_CREATE_LOCK                Backend_WaitEvent = 119
	Backend_WAIT_EVENT_LWLOCK_BTREE_VACUUM_LOCK                     Backend_WaitEvent = 120
	Backend_WAIT_EVENT_LWLOCK_ADDIN_SHMEM_INIT_LOCK                 Backend_WaitEvent = 121
	Backend_WAIT_EVENT_LWLOCK_AUTOVACUUM_LOCK                       Backend_WaitEvent = 122
	Backend_WAIT_EVENT_LWLOCK_AUTOVACUUM_SCHEDULE_LOCK              Backend_WaitEvent = 123
	Backend_WAIT_EVENT_LWLOCK_SYNC_SCAN_LOCK                        Backend_WaitEvent = 124
	Backend_WAIT_EVENT_LWLOCK_RELATION_MAPPING_LOCK                 Backend_WaitEvent = 125
	Backend_WAIT_EVENT_LWLOCK_ASYNC_CTL_LOCK                        Backend_WaitEvent = 126
	Backend_WAIT_EVENT_LWLOCK_ASYNC_QUEUE_LOCK                      Backend_WaitEvent = 127
	Backend_WAIT_EVENT_LWLOCK_SERIALIZABLE_XACT_HASH_LOCK           Backend_WaitEvent = 128
	Backend_WAIT_EVENT_LWLOCK_SERIALIZABLE_FINISHED_LIST_LOCK       Backend_WaitEvent = 129
	Backend_WAIT_EVENT_LWLOCK_SERIALIZABLE_PREDICATE_LOCK_LIST_LOCK Backend_WaitEvent = 130
	Backend_WAIT_EVENT_LWLOCK_OLD_SER_XID_LOCK                      Backend_WaitEvent = 131
	Backend_WAIT_EVENT_LWLOCK_SYNC_REP_LOCK                         Backend_WaitEvent = 132
	Backend_WAIT_EVENT_LWLOCK_BACKGROUND_WORKER_LOCK                Backend_WaitEvent = 133
	Backend_WAIT_EVENT_LWLOCK_DYNAMIC_SHARD_MEMORY_CONTROL_LOCK     Backend_WaitEvent = 134
	Backend_WAIT_EVENT_LWLOCK_AUTO_FILE_LOCK                        Backend_WaitEvent = 135
	Backend_WAIT_EVENT_LWLOCK_REPLICATION_SLOT_ALLOCATION_LOCK      Backend_WaitEvent = 136
	Backend_WAIT_EVENT_LWLOCK_REPLICATION_SLOT_CONTROL_LOCK         Backend_WaitEvent = 137
	Backend_WAIT_EVENT_LWLOCK_COMMIT_TS_CONTROL_LOCK                Backend_WaitEvent = 138
	Backend_WAIT_EVENT_LWLOCK_COMMIT_TS_LOCK                        Backend_WaitEvent = 139
	Backend_WAIT_EVENT_LWLOCK_REPLICATION_ORIGIN_LOCK               Backend_WaitEvent = 140
	Backend_WAIT_EVENT_LWLOCK_MULTI_XACT_TRUNCATION_LOCK            Backend_WaitEvent = 141
	Backend_WAIT_EVENT_LWLOCK_OLD_SNAPSHOT_TIME_MAP_LOCK            Backend_WaitEvent = 142
	Backend_WAIT_EVENT_LWLOCK_BACKEND_RANDOM_LOCK                   Backend_WaitEvent = 143
	Backend_WAIT_EVENT_LWLOCK_LOGICAL_REP_WORKER_LOCK               Backend_WaitEvent = 144
	Backend_WAIT_EVENT_LWLOCK_CLOG_TRUNCATION_LOCK                  Backend_WaitEvent = 145
	// Source: lwlock.h (BuiltinTrancheIds)
	Backend_WAIT_EVENT_LWTRANCHE_CLOG_BUFFERS                    Backend_WaitEvent = 146
	Backend_WAIT_EVENT_LWTRANCHE_COMMITTS_BUFFERS                Backend_WaitEvent = 147
	Backend_WAIT_EVENT_LWTRANCHE_SUBTRANS_BUFFERS                Backend_WaitEvent = 148
	Backend_WAIT_EVENT_LWTRANCHE_MXACTOFFSET_BUFFERS             Backend_WaitEvent = 149
	Backend_WAIT_EVENT_LWTRANCHE_MXACTMEMBER_BUFFERS             Backend_WaitEvent = 150
	Backend_WAIT_EVENT_LWTRANCHE_ASYNC_BUFFERS                   Backend_WaitEvent = 151
	Backend_WAIT_EVENT_LWTRANCHE_OLDSERXID_BUFFERS               Backend_WaitEvent = 152
	Backend_WAIT_EVENT_LWTRANCHE_WAL_INSERT                      Backend_WaitEvent = 153
	Backend_WAIT_EVENT_LWTRANCHE_BUFFER_CONTENT                  Backend_WaitEvent = 154
	Backend_WAIT_EVENT_LWTRANCHE_BUFFER_IO_IN_PROGRESS           Backend_WaitEvent = 155
	Backend_WAIT_EVENT_LWTRANCHE_REPLICATION_ORIGIN              Backend_WaitEvent = 156
	Backend_WAIT_EVENT_LWTRANCHE_REPLICATION_SLOT_IO_IN_PROGRESS Backend_WaitEvent = 157
	Backend_WAIT_EVENT_LWTRANCHE_PROC                            Backend_WaitEvent = 158
	Backend_WAIT_EVENT_LWTRANCHE_BUFFER_MAPPING                  Backend_WaitEvent = 159
	Backend_WAIT_EVENT_LWTRANCHE_LOCK_MANAGER                    Backend_WaitEvent = 160
	Backend_WAIT_EVENT_LWTRANCHE_PREDICATE_LOCK_MANAGER          Backend_WaitEvent = 161
	Backend_WAIT_EVENT_LWTRANCHE_PARALLEL_HASH_JOIN              Backend_WaitEvent = 162
	Backend_WAIT_EVENT_LWTRANCHE_PARALLEL_QUERY_DSA              Backend_WaitEvent = 163
	Backend_WAIT_EVENT_LWTRANCHE_SESSION_DSA                     Backend_WaitEvent = 164
	Backend_WAIT_EVENT_LWTRANCHE_SESSION_RECORD_TABLE            Backend_WaitEvent = 165
	Backend_WAIT_EVENT_LWTRANCHE_SESSION_TYPMOD_TABLE            Backend_WaitEvent = 166
	Backend_WAIT_EVENT_LWTRANCHE_SHARED_TUPLESTORE               Backend_WaitEvent = 167
	Backend_WAIT_EVENT_LWTRANCHE_TBM                             Backend_WaitEvent = 168
	Backend_WAIT_EVENT_LWTRANCHE_PARALLEL_APPEND                 Backend_WaitEvent = 169
	// Source: lock.h (LockTagType enum), lockfuncs.c (LockTagTypeNames variable)
	Backend_WAIT_EVENT_LOCKTAG_RELATION           Backend_WaitEvent = 200
	Backend_WAIT_EVENT_LOCKTAG_RELATION_EXTEND    Backend_WaitEvent = 201
	Backend_WAIT_EVENT_LOCKTAG_PAGE               Backend_WaitEvent = 202
	Backend_WAIT_EVENT_LOCKTAG_TUPLE              Backend_WaitEvent = 203
	Backend_WAIT_EVENT_LOCKTAG_TRANSACTION        Backend_WaitEvent = 204
	Backend_WAIT_EVENT_LOCKTAG_VIRTUALTRANSACTION Backend_WaitEvent = 205
	Backend_WAIT_EVENT_LOCKTAG_SPECULATIVE_TOKEN  Backend_WaitEvent = 206
	Backend_WAIT_EVENT_LOCKTAG_OBJECT             Backend_WaitEvent = 207
	Backend_WAIT_EVENT_LOCKTAG_USERLOCK           Backend_WaitEvent = 208
	Backend_WAIT_EVENT_LOCKTAG_ADVISORY           Backend_WaitEvent = 209
	// Source: pgstat.c (pgstat_get_wait_event function)
	Backend_WAIT_EVENT_BUFFER_PIN Backend_WaitEvent = 300
	// Source: pgstat.c (pgstat_get_wait_event function)
	Backend_WAIT_EVENT_EXTENSION          Backend_WaitEvent = 400
	Backend_WAIT_EVENT_PG_STAT_STATEMENTS Backend_WaitEvent = 401
	// Source: pgstat.h (WaitEventActivity enum), pgstat.c (pgstat_get_wait_activity function)
	Backend_WAIT_EVENT_ARCHIVER_MAIN         Backend_WaitEvent = 500
	Backend_WAIT_EVENT_AUTOVACUUM_MAIN       Backend_WaitEvent = 501
	Backend_WAIT_EVENT_BGWRITER_HIBERNATE    Backend_WaitEvent = 502
	Backend_WAIT_EVENT_BGWRITER_MAIN         Backend_WaitEvent = 503
	Backend_WAIT_EVENT_CHECKPOINTER_MAIN     Backend_WaitEvent = 504
	Backend_WAIT_EVENT_LOGICAL_APPLY_MAIN    Backend_WaitEvent = 505
	Backend_WAIT_EVENT_LOGICAL_LAUNCHER_MAIN Backend_WaitEvent = 506
	Backend_WAIT_EVENT_PGSTAT_MAIN           Backend_WaitEvent = 507
	Backend_WAIT_EVENT_RECOVERY_WAL_ALL      Backend_WaitEvent = 508
	Backend_WAIT_EVENT_RECOVERY_WAL_STREAM   Backend_WaitEvent = 509
	Backend_WAIT_EVENT_SYSLOGGER_MAIN        Backend_WaitEvent = 510
	Backend_WAIT_EVENT_WAL_RECEIVER_MAIN     Backend_WaitEvent = 511
	Backend_WAIT_EVENT_WAL_SENDER_MAIN       Backend_WaitEvent = 512
	Backend_WAIT_EVENT_WAL_WRITER_MAIN       Backend_WaitEvent = 513
	// Source: pgstat.h (WaitEventClient enum), pgstat.c (pgstat_get_wait_client function)
	Backend_WAIT_EVENT_CLIENT_READ              Backend_WaitEvent = 600
	Backend_WAIT_EVENT_CLIENT_WRITE             Backend_WaitEvent = 601
	Backend_WAIT_EVENT_LIBPQWALRECEIVER_CONNECT Backend_WaitEvent = 602
	Backend_WAIT_EVENT_LIBPQWALRECEIVER_RECEIVE Backend_WaitEvent = 603
	Backend_WAIT_EVENT_SSL_OPEN_SERVER          Backend_WaitEvent = 604
	Backend_WAIT_EVENT_WAL_RECEIVER_WAIT_START  Backend_WaitEvent = 605
	Backend_WAIT_EVENT_WAL_SENDER_WAIT_WAL      Backend_WaitEvent = 606
	Backend_WAIT_EVENT_WAL_SENDER_WRITE_DATA    Backend_WaitEvent = 607
	// Source: pgstat.h (WaitEventIPC enum), pgstat.c (pgstat_get_wait_ipc function)
	Backend_WAIT_EVENT_BGWORKER_SHUTDOWN                Backend_WaitEvent = 700
	Backend_WAIT_EVENT_BGWORKER_STARTUP                 Backend_WaitEvent = 701
	Backend_WAIT_EVENT_BTREE_PAGE                       Backend_WaitEvent = 702
	Backend_WAIT_EVENT_CLOG_GROUP_UPDATE                Backend_WaitEvent = 703
	Backend_WAIT_EVENT_EXECUTE_GATHER                   Backend_WaitEvent = 704
	Backend_WAIT_EVENT_HASH_BATCH_ALLOCATING            Backend_WaitEvent = 705
	Backend_WAIT_EVENT_HASH_BATCH_ELECTING              Backend_WaitEvent = 706
	Backend_WAIT_EVENT_HASH_BATCH_LOADING               Backend_WaitEvent = 707
	Backend_WAIT_EVENT_HASH_BUILD_ALLOCATING            Backend_WaitEvent = 708
	Backend_WAIT_EVENT_HASH_BUILD_ELECTING              Backend_WaitEvent = 709
	Backend_WAIT_EVENT_HASH_BUILD_HASHING_INNER         Backend_WaitEvent = 710
	Backend_WAIT_EVENT_HASH_BUILD_HASHING_OUTER         Backend_WaitEvent = 711
	Backend_WAIT_EVENT_HASH_GROW_BATCHES_ALLOCATING     Backend_WaitEvent = 712
	Backend_WAIT_EVENT_HASH_GROW_BATCHES_DECIDING       Backend_WaitEvent = 713
	Backend_WAIT_EVENT_HASH_GROW_BATCHES_ELECTING       Backend_WaitEvent = 714
	Backend_WAIT_EVENT_HASH_GROW_BATCHES_FINISHING      Backend_WaitEvent = 715
	Backend_WAIT_EVENT_HASH_GROW_BATCHES_REPARTITIONING Backend_WaitEvent = 716
	Backend_WAIT_EVENT_HASH_GROW_BUCKETS_ALLOCATING     Backend_WaitEvent = 717
	Backend_WAIT_EVENT_HASH_GROW_BUCKETS_ELECTING       Backend_WaitEvent = 718
	Backend_WAIT_EVENT_HASH_GROW_BUCKETS_REINSERTING    Backend_WaitEvent = 719
	Backend_WAIT_EVENT_LOGICAL_SYNC_DATA                Backend_WaitEvent = 720
	Backend_WAIT_EVENT_LOGICAL_SYNC_STATE_CHANGE        Backend_WaitEvent = 721
	Backend_WAIT_EVENT_MQ_INTERNAL                      Backend_WaitEvent = 722
	Backend_WAIT_EVENT_MQ_PUT_MESSAGE                   Backend_WaitEvent = 723
	Backend_WAIT_EVENT_MQ_RECEIVE                       Backend_WaitEvent = 724
	Backend_WAIT_EVENT_MQ_SEND                          Backend_WaitEvent = 725
	Backend_WAIT_EVENT_PARALLEL_BITMAP_SCAN             Backend_WaitEvent = 726
	Backend_WAIT_EVENT_PARALLEL_CREATE_INDEX_SCAN       Backend_WaitEvent = 727
	Backend_WAIT_EVENT_PARALLEL_FINISH                  Backend_WaitEvent = 728
	Backend_WAIT_EVENT_PROCARRAY_GROUP_UPDATE           Backend_WaitEvent = 729
	Backend_WAIT_EVENT_PROMOTE                          Backend_WaitEvent = 730
	Backend_WAIT_EVENT_REPLICATION_ORIGIN_DROP          Backend_WaitEvent = 731
	Backend_WAIT_EVENT_REPLICATION_SLOT_DROP            Backend_WaitEvent = 732
	Backend_WAIT_EVENT_SAFE_SNAPSHOT                    Backend_WaitEvent = 733
	Backend_WAIT_EVENT_SYNC_REP                         Backend_WaitEvent = 734
	// Source: pgstat.h (WaitEventTimeout enum), pgstat.c (pgstat_get_wait_timeout function)
	Backend_WAIT_EVENT_BASE_BACKUP_THROTTLE Backend_WaitEvent = 800
	Backend_WAIT_EVENT_PG_SLEEP             Backend_WaitEvent = 801
	Backend_WAIT_EVENT_RECOVERY_APPLY_DELAY Backend_WaitEvent = 802
	// Source: pgstat.h (WaitEventIO enum), pgstat.c (pgstat_get_wait_io function)
	Backend_WAIT_EVENT_BUFFILE_READ                    Backend_WaitEvent = 900
	Backend_WAIT_EVENT_BUFFILE_WRITE                   Backend_WaitEvent = 901
	Backend_WAIT_EVENT_CONTROL_FILE_READ               Backend_WaitEvent = 902
	Backend_WAIT_EVENT_CONTROL_FILE_SYNC               Backend_WaitEvent = 903
	Backend_WAIT_EVENT_CONTROL_FILE_SYNC_UPDATE        Backend_WaitEvent = 904
	Backend_WAIT_EVENT_CONTROL_FILE_WRITE              Backend_WaitEvent = 905
	Backend_WAIT_EVENT_CONTROL_FILE_WRITE_UPDATE       Backend_WaitEvent = 906
	Backend_WAIT_EVENT_COPY_FILE_READ                  Backend_WaitEvent = 907
	Backend_WAIT_EVENT_COPY_FILE_WRITE                 Backend_WaitEvent = 908
	Backend_WAIT_EVENT_DATA_FILE_EXTEND                Backend_WaitEvent = 909
	Backend_WAIT_EVENT_DATA_FILE_FLUSH                 Backend_WaitEvent = 910
	Backend_WAIT_EVENT_DATA_FILE_IMMEDIATE_SYNC        Backend_WaitEvent = 911
	Backend_WAIT_EVENT_DATA_FILE_PREFETCH              Backend_WaitEvent = 912
	Backend_WAIT_EVENT_DATA_FILE_READ                  Backend_WaitEvent = 913
	Backend_WAIT_EVENT_DATA_FILE_SYNC                  Backend_WaitEvent = 914
	Backend_WAIT_EVENT_DATA_FILE_TRUNCATE              Backend_WaitEvent = 915
	Backend_WAIT_EVENT_DATA_FILE_WRITE                 Backend_WaitEvent = 916
	Backend_WAIT_EVENT_DSM_FILL_ZERO_WRITE             Backend_WaitEvent = 917
	Backend_WAIT_EVENT_LOCK_FILE_ADDTODATADIR_READ     Backend_WaitEvent = 918
	Backend_WAIT_EVENT_LOCK_FILE_ADDTODATADIR_SYNC     Backend_WaitEvent = 919
	Backend_WAIT_EVENT_LOCK_FILE_ADDTODATADIR_WRITE    Backend_WaitEvent = 920
	Backend_WAIT_EVENT_LOCK_FILE_CREATE_READ           Backend_WaitEvent = 921
	Backend_WAIT_EVENT_LOCK_FILE_CREATE_SYNC           Backend_WaitEvent = 922
	Backend_WAIT_EVENT_LOCK_FILE_CREATE_WRITE          Backend_WaitEvent = 923
	Backend_WAIT_EVENT_LOCK_FILE_RECHECKDATADIR_READ   Backend_WaitEvent = 924
	Backend_WAIT_EVENT_LOGICAL_REWRITE_CHECKPOINT_SYNC Backend_WaitEvent = 925
	Backend_WAIT_EVENT_LOGICAL_REWRITE_MAPPING_SYNC    Backend_WaitEvent = 926
	Backend_WAIT_EVENT_LOGICAL_REWRITE_MAPPING_WRITE   Backend_WaitEvent = 927
	Backend_WAIT_EVENT_LOGICAL_REWRITE_SYNC            Backend_WaitEvent = 928
	Backend_WAIT_EVENT_LOGICAL_REWRITE_TRUNCATE        Backend_WaitEvent = 929
	Backend_WAIT_EVENT_LOGICAL_REWRITE_WRITE           Backend_WaitEvent = 930
	Backend_WAIT_EVENT_RELATION_MAP_READ               Backend_WaitEvent = 931
	Backend_WAIT_EVENT_RELATION_MAP_SYNC               Backend_WaitEvent = 932
	Backend_WAIT_EVENT_RELATION_MAP_WRITE              Backend_WaitEvent = 933
	Backend_WAIT_EVENT_REORDER_BUFFER_READ             Backend_WaitEvent = 934
	Backend_WAIT_EVENT_REORDER_BUFFER_WRITE            Backend_WaitEvent = 935
	Backend_WAIT_EVENT_REORDER_LOGICAL_MAPPING_READ    Backend_WaitEvent = 936
	Backend_WAIT_EVENT_REPLICATION_SLOT_READ           Backend_WaitEvent = 937
	Backend_WAIT_EVENT_REPLICATION_SLOT_RESTORE_SYNC   Backend_WaitEvent = 938
	Backend_WAIT_EVENT_REPLICATION_SLOT_SYNC           Backend_WaitEvent = 939
	Backend_WAIT_EVENT_REPLICATION_SLOT_WRITE          Backend_WaitEvent = 940
	Backend_WAIT_EVENT_SLRU_FLUSH_SYNC                 Backend_WaitEvent = 941
	Backend_WAIT_EVENT_SLRU_READ                       Backend_WaitEvent = 942
	Backend_WAIT_EVENT_SLRU_SYNC                       Backend_WaitEvent = 943
	Backend_WAIT_EVENT_SLRU_WRITE                      Backend_WaitEvent = 944
	Backend_WAIT_EVENT_SNAPBUILD_READ                  Backend_WaitEvent = 945
	Backend_WAIT_EVENT_SNAPBUILD_SYNC                  Backend_WaitEvent = 946
	Backend_WAIT_EVENT_SNAPBUILD_WRITE                 Backend_WaitEvent = 947
	Backend_WAIT_EVENT_TIMELINE_HISTORY_FILE_SYNC      Backend_WaitEvent = 948
	Backend_WAIT_EVENT_TIMELINE_HISTORY_FILE_WRITE     Backend_WaitEvent = 949
	Backend_WAIT_EVENT_TIMELINE_HISTORY_READ           Backend_WaitEvent = 950
	Backend_WAIT_EVENT_TIMELINE_HISTORY_SYNC           Backend_WaitEvent = 951
	Backend_WAIT_EVENT_TIMELINE_HISTORY_WRITE          Backend_WaitEvent = 952
	Backend_WAIT_EVENT_TWOPHASE_FILE_READ              Backend_WaitEvent = 953
	Backend_WAIT_EVENT_TWOPHASE_FILE_SYNC              Backend_WaitEvent = 954
	Backend_WAIT_EVENT_TWOPHASE_FILE_WRITE             Backend_WaitEvent = 955
	Backend_WAIT_EVENT_WALSENDER_TIMELINE_HISTORY_READ Backend_WaitEvent = 956
	Backend_WAIT_EVENT_WAL_BOOTSTRAP_SYNC              Backend_WaitEvent = 957
	Backend_WAIT_EVENT_WAL_BOOTSTRAP_WRITE             Backend_WaitEvent = 958
	Backend_WAIT_EVENT_WAL_COPY_READ                   Backend_WaitEvent = 959
	Backend_WAIT_EVENT_WAL_COPY_SYNC                   Backend_WaitEvent = 960
	Backend_WAIT_EVENT_WAL_COPY_WRITE                  Backend_WaitEvent = 961
	Backend_WAIT_EVENT_WAL_INIT_SYNC                   Backend_WaitEvent = 962
	Backend_WAIT_EVENT_WAL_INIT_WRITE                  Backend_WaitEvent = 963
	Backend_WAIT_EVENT_WAL_READ                        Backend_WaitEvent = 964
	Backend_WAIT_EVENT_WAL_SYNC                        Backend_WaitEvent = 965
	Backend_WAIT_EVENT_WAL_SYNC_METHOD_ASSIGN          Backend_WaitEvent = 966
	Backend_WAIT_EVENT_WAL_WRITE                       Backend_WaitEvent = 967
	// Custom third-party events for Postgres forks
	Backend_WAIT_EVENT_IO_XACT_SYNC Backend_WaitEvent = 10000
	Backend_AURORA_READER_MAIN      Backend_WaitEvent = 10001
	Backend_AURORA_RUNTIME_MAIN     Backend_WaitEvent = 10002
)

var Backend_WaitEvent_name = map[int32]string{
	0:     "WAIT_EVENT_UNKNOWN",
	101:   "WAIT_EVENT_LWLOCK_SHMEM_INDEX_LOCK",
	102:   "WAIT_EVENT_LWLOCK_OID_GEN_LOCK",
	103:   "WAIT_EVENT_LWLOCK_XID_GEN_LOCK",
	104:   "WAIT_EVENT_LWLOCK_PROC_ARRAY_LOCK",
	105:   "WAIT_EVENT_LWLOCK_S_INVAL_READ_LOCK",
	106:   "WAIT_EVENT_LWLOCK_S_INVAL_WRITE_LOCK",
	107:   "WAIT_EVENT_LWLOCK_WAL_BUF_MAPPING_LOCK",
	108:   "WAIT_EVENT_LWLOCK_WAL_WRITE_LOCK",
	109:   "WAIT_EVENT_LWLOCK_CONTROL_FILE_LOCK",
	110:   "WAIT_EVENT_LWLOCK_CHECKPOINT_LOCK",
	111:   "WAIT_EVENT_LWLOCK_C_LOG_CONTROL_LOCK",
	112:   "WAIT_EVENT_LWLOCK_SUBTRANS_CONTROL_LOCK",
	113:   "WAIT_EVENT_LWLOCK_MULTI_XACT_GEN_LOCK",
	114:   "WAIT_EVENT_LWLOCK_MULTI_XACT_OFFSET_CONTROL_LOCK",
	115:   "WAIT_EVENT_LWLOCK_MULTI_XACT_MEMBER_CONTROL_LOCK",
	116:   "WAIT_EVENT_LWLOCK_REL_CACHE_INIT_LOCK",
	117:   "WAIT_EVENT_LWLOCK_CHECKPOINTER_COMM_LOCK",
	118:   "WAIT_EVENT_LWLOCK_TWO_PHASE_STATE_LOCK",
	119:   "WAIT_EVENT_LWLOCK_TABLESPACE_CREATE_LOCK",
	120:   "WAIT_EVENT_LWLOCK_BTREE_VACUUM_LOCK",
	121:   "WAIT_EVENT_LWLOCK_ADDIN_SHMEM_INIT_LOCK",
	122:   "WAIT_EVENT_LWLOCK_AUTOVACUUM_LOCK",
	123:   "WAIT_EVENT_LWLOCK_AUTOVACUUM_SCHEDULE_LOCK",
	124:   "WAIT_EVENT_LWLOCK_SYNC_SCAN_LOCK",
	125:   "WAIT_EVENT_LWLOCK_RELATION_MAPPING_LOCK",
	126:   "WAIT_EVENT_LWLOCK_ASYNC_CTL_LOCK",
	127:   "WAIT_EVENT_LWLOCK_ASYNC_QUEUE_LOCK",
	128:   "WAIT_EVENT_LWLOCK_SERIALIZABLE_XACT_HASH_LOCK",
	129:   "WAIT_EVENT_LWLOCK_SERIALIZABLE_FINISHED_LIST_LOCK",
	130:   "WAIT_EVENT_LWLOCK_SERIALIZABLE_PREDICATE_LOCK_LIST_LOCK",
	131:   "WAIT_EVENT_LWLOCK_OLD_SER_XID_LOCK",
	132:   "WAIT_EVENT_LWLOCK_SYNC_REP_LOCK",
	133:   "WAIT_EVENT_LWLOCK_BACKGROUND_WORKER_LOCK",
	134:   "WAIT_EVENT_LWLOCK_DYNAMIC_SHARD_MEMORY_CONTROL_LOCK",
	135:   "WAIT_EVENT_LWLOCK_AUTO_FILE_LOCK",
	136:   "WAIT_EVENT_LWLOCK_REPLICATION_SLOT_ALLOCATION_LOCK",
	137:   "WAIT_EVENT_LWLOCK_REPLICATION_SLOT_CONTROL_LOCK",
	138:   "WAIT_EVENT_LWLOCK_COMMIT_TS_CONTROL_LOCK",
	139:   "WAIT_EVENT_LWLOCK_COMMIT_TS_LOCK",
	140:   "WAIT_EVENT_LWLOCK_REPLICATION_ORIGIN_LOCK",
	141:   "WAIT_EVENT_LWLOCK_MULTI_XACT_TRUNCATION_LOCK",
	142:   "WAIT_EVENT_LWLOCK_OLD_SNAPSHOT_TIME_MAP_LOCK",
	143:   "WAIT_EVENT_LWLOCK_BACKEND_RANDOM_LOCK",
	144:   "WAIT_EVENT_LWLOCK_LOGICAL_REP_WORKER_LOCK",
	145:   "WAIT_EVENT_LWLOCK_CLOG_TRUNCATION_LOCK",
	146:   "WAIT_EVENT_LWTRANCHE_CLOG_BUFFERS",
	147:   "WAIT_EVENT_LWTRANCHE_COMMITTS_BUFFERS",
	148:   "WAIT_EVENT_LWTRANCHE_SUBTRANS_BUFFERS",
	149:   "WAIT_EVENT_LWTRANCHE_MXACTOFFSET_BUFFERS",
	150:   "WAIT_EVENT_LWTRANCHE_MXACTMEMBER_BUFFERS",
	151:   "WAIT_EVENT_LWTRANCHE_ASYNC_BUFFERS",
	152:   "WAIT_EVENT_LWTRANCHE_OLDSERXID_BUFFERS",
	153:   "WAIT_EVENT_LWTRANCHE_WAL_INSERT",
	154:   "WAIT_EVENT_LWTRANCHE_BUFFER_CONTENT",
	155:   "WAIT_EVENT_LWTRANCHE_BUFFER_IO_IN_PROGRESS",
	156:   "WAIT_EVENT_LWTRANCHE_REPLICATION_ORIGIN",
	157:   "WAIT_EVENT_LWTRANCHE_REPLICATION_SLOT_IO_IN_PROGRESS",
	158:   "WAIT_EVENT_LWTRANCHE_PROC",
	159:   "WAIT_EVENT_LWTRANCHE_BUFFER_MAPPING",
	160:   "WAIT_EVENT_LWTRANCHE_LOCK_MANAGER",
	161:   "WAIT_EVENT_LWTRANCHE_PREDICATE_LOCK_MANAGER",
	162:   "WAIT_EVENT_LWTRANCHE_PARALLEL_HASH_JOIN",
	163:   "WAIT_EVENT_LWTRANCHE_PARALLEL_QUERY_DSA",
	164:   "WAIT_EVENT_LWTRANCHE_SESSION_DSA",
	165:   "WAIT_EVENT_LWTRANCHE_SESSION_RECORD_TABLE",
	166:   "WAIT_EVENT_LWTRANCHE_SESSION_TYPMOD_TABLE",
	167:   "WAIT_EVENT_LWTRANCHE_SHARED_TUPLESTORE",
	168:   "WAIT_EVENT_LWTRANCHE_TBM",
	169:   "WAIT_EVENT_LWTRANCHE_PARALLEL_APPEND",
	200:   "WAIT_EVENT_LOCKTAG_RELATION",
	201:   "WAIT_EVENT_LOCKTAG_RELATION_EXTEND",
	202:   "WAIT_EVENT_LOCKTAG_PAGE",
	203:   "WAIT_EVENT_LOCKTAG_TUPLE",
	204:   "WAIT_EVENT_LOCKTAG_TRANSACTION",
	205:   "WAIT_EVENT_LOCKTAG_VIRTUALTRANSACTION",
	206:   "WAIT_EVENT_LOCKTAG_SPECULATIVE_TOKEN",
	207:   "WAIT_EVENT_LOCKTAG_OBJECT",
	208:   "WAIT_EVENT_LOCKTAG_USERLOCK",
	209:   "WAIT_EVENT_LOCKTAG_ADVISORY",
	300:   "WAIT_EVENT_BUFFER_PIN",
	400:   "WAIT_EVENT_EXTENSION",
	401:   "WAIT_EVENT_PG_STAT_STATEMENTS",
	500:   "WAIT_EVENT_ARCHIVER_MAIN",
	501:   "WAIT_EVENT_AUTOVACUUM_MAIN",
	502:   "WAIT_EVENT_BGWRITER_HIBERNATE",
	503:   "WAIT_EVENT_BGWRITER_MAIN",
	504:   "WAIT_EVENT_CHECKPOINTER_MAIN",
	505:   "WAIT_EVENT_LOGICAL_APPLY_MAIN",
	506:   "WAIT_EVENT_LOGICAL_LAUNCHER_MAIN",
	507:   "WAIT_EVENT_PGSTAT_MAIN",
	508:   "WAIT_EVENT_RECOVERY_WAL_ALL",
	509:   "WAIT_EVENT_RECOVERY_WAL_STREAM",
	510:   "WAIT_EVENT_SYSLOGGER_MAIN",
	511:   "WAIT_EVENT_WAL_RECEIVER_MAIN",
	512:   "WAIT_EVENT_WAL_SENDER_MAIN",
	513:   "WAIT_EVENT_WAL_WRITER_MAIN",
	600:   "WAIT_EVENT_CLIENT_READ",
	601:   "WAIT_EVENT_CLIENT_WRITE",
	602:   "WAIT_EVENT_LIBPQWALRECEIVER_CONNECT",
	603:   "WAIT_EVENT_LIBPQWALRECEIVER_RECEIVE",
	604:   "WAIT_EVENT_SSL_OPEN_SERVER",
	605:   "WAIT_EVENT_WAL_RECEIVER_WAIT_START",
	606:   "WAIT_EVENT_WAL_SENDER_WAIT_WAL",
	607:   "WAIT_EVENT_WAL_SENDER_WRITE_DATA",
	700:   "WAIT_EVENT_BGWORKER_SHUTDOWN",
	701:   "WAIT_EVENT_BGWORKER_STARTUP",
	702:   "WAIT_EVENT_BTREE_PAGE",
	703:   "WAIT_EVENT_CLOG_GROUP_UPDATE",
	704:   "WAIT_EVENT_EXECUTE_GATHER",
	705:   "WAIT_EVENT_HASH_BATCH_ALLOCATING",
	706:   "WAIT_EVENT_HASH_BATCH_ELECTING",
	707:   "WAIT_EVENT_HASH_BATCH_LOADING",
	708:   "WAIT_EVENT_HASH_BUILD_ALLOCATING",
	709:   "WAIT_EVENT_HASH_BUILD_ELECTING",
	710:   "WAIT_EVENT_HASH_BUILD_HASHING_INNER",
	711:   "WAIT_EVENT_HASH_BUILD_HASHING_OUTER",
	712:   "WAIT_EVENT_HASH_GROW_BATCHES_ALLOCATING",
	713:   "WAIT_EVENT_HASH_GROW_BATCHES_DECIDING",
	714:   "WAIT_EVENT_HASH_GROW_BATCHES_ELECTING",
	715:   "WAIT_EVENT_HASH_GROW_BATCHES_FINISHING",
	716:   "WAIT_EVENT_HASH_GROW_BATCHES_REPARTITIONING",
	717:   "WAIT_EVENT_HASH_GROW_BUCKETS_ALLOCATING",
	718:   "WAIT_EVENT_HASH_GROW_BUCKETS_ELECTING",
	719:   "WAIT_EVENT_HASH_GROW_BUCKETS_REINSERTING",
	720:   "WAIT_EVENT_LOGICAL_SYNC_DATA",
	721:   "WAIT_EVENT_LOGICAL_SYNC_STATE_CHANGE",
	722:   "WAIT_EVENT_MQ_INTERNAL",
	723:   "WAIT_EVENT_MQ_PUT_MESSAGE",
	724:   "WAIT_EVENT_MQ_RECEIVE",
	725:   "WAIT_EVENT_MQ_SEND",
	726:   "WAIT_EVENT_PARALLEL_BITMAP_SCAN",
	727:   "WAIT_EVENT_PARALLEL_CREATE_INDEX_SCAN",
	728:   "WAIT_EVENT_PARALLEL_FINISH",
	729:   "WAIT_EVENT_PROCARRAY_GROUP_UPDATE",
	730:   "WAIT_EVENT_PROMOTE",
	731:   "WAIT_EVENT_REPLICATION_ORIGIN_DROP",
	732:   "WAIT_EVENT_REPLICATION_SLOT_DROP",
	733:   "WAIT_EVENT_SAFE_SNAPSHOT",
	734:   "WAIT_EVENT_SYNC_REP",
	800:   "WAIT_EVENT_BASE_BACKUP_THROTTLE",
	801:   "WAIT_EVENT_PG_SLEEP",
	802:   "WAIT_EVENT_RECOVERY_APPLY_DELAY",
	900:   "WAIT_EVENT_BUFFILE_READ",
	901:   "WAIT_EVENT_BUFFILE_WRITE",
	902:   "WAIT_EVENT_CONTROL_FILE_READ",
	903:   "WAIT_EVENT_CONTROL_FILE_SYNC",
	904:   "WAIT_EVENT_CONTROL_FILE_SYNC_UPDATE",
	905:   "WAIT_EVENT_CONTROL_FILE_WRITE",
	906:   "WAIT_EVENT_CONTROL_FILE_WRITE_UPDATE",
	907:   "WAIT_EVENT_COPY_FILE_READ",
	908:   "WAIT_EVENT_COPY_FILE_WRITE",
	909:   "WAIT_EVENT_DATA_FILE_EXTEND",
	910:   "WAIT_EVENT_DATA_FILE_FLUSH",
	911:   "WAIT_EVENT_DATA_FILE_IMMEDIATE_SYNC",
	912:   "WAIT_EVENT_DATA_FILE_PREFETCH",
	913:   "WAIT_EVENT_DATA_FILE_READ",
	914:   "WAIT_EVENT_DATA_FILE_SYNC",
	915:   "WAIT_EVENT_DATA_FILE_TRUNCATE",
	916:   "WAIT_EVENT_DATA_FILE_WRITE",
	917:   "WAIT_EVENT_DSM_FILL_ZERO_WRITE",
	918:   "WAIT_EVENT_LOCK_FILE_ADDTODATADIR_READ",
	919:   "WAIT_EVENT_LOCK_FILE_ADDTODATADIR_SYNC",
	920:   "WAIT_EVENT_LOCK_FILE_ADDTODATADIR_WRITE",
	921:   "WAIT_EVENT_LOCK_FILE_CREATE_READ",
	922:   "WAIT_EVENT_LOCK_FILE_CREATE_SYNC",
	923:   "WAIT_EVENT_LOCK_FILE_CREATE_WRITE",
	924:   "WAIT_EVENT_LOCK_FILE_RECHECKDATADIR_READ",
	925:   "WAIT_EVENT_LOGICAL_REWRITE_CHECKPOINT_SYNC",
	926:   "WAIT_EVENT_LOGICAL_REWRITE_MAPPING_SYNC",
	927:   "WAIT_EVENT_LOGICAL_REWRITE_MAPPING_WRITE",
	928:   "WAIT_EVENT_LOGICAL_REWRITE_SYNC",
	929:   "WAIT_EVENT_LOGICAL_REWRITE_TRUNCATE",
	930:   "WAIT_EVENT_LOGICAL_REWRITE_WRITE",
	931:   "WAIT_EVENT_RELATION_MAP_READ",
	932:   "WAIT_EVENT_RELATION_MAP_SYNC",
	933:   "WAIT_EVENT_RELATION_MAP_WRITE",
	934:   "WAIT_EVENT_REORDER_BUFFER_READ",
	935:   "WAIT_EVENT_REORDER_BUFFER_WRITE",
	936:   "WAIT_EVENT_REORDER_LOGICAL_MAPPING_READ",
	937:   "WAIT_EVENT_REPLICATION_SLOT_READ",
	938:   "WAIT_EVENT_REPLICATION_SLOT_RESTORE_SYNC",
	939:   "WAIT_EVENT_REPLICATION_SLOT_SYNC",
	940:   "WAIT_EVENT_REPLICATION_SLOT_WRITE",
	941:   "WAIT_EVENT_SLRU_FLUSH_SYNC",
	942:   "WAIT_EVENT_SLRU_READ",
	943:   "WAIT_EVENT_SLRU_SYNC",
	944:   "WAIT_EVENT_SLRU_WRITE",
	945:   "WAIT_EVENT_SNAPBUILD_READ",
	946:   "WAIT_EVENT_SNAPBUILD_SYNC",
	947:   "WAIT_EVENT_SNAPBUILD_WRITE",
	948:   "WAIT_EVENT_TIMELINE_HISTORY_FILE_SYNC",
	949:   "WAIT_EVENT_TIMELINE_HISTORY_FILE_WRITE",
	950:   "WAIT_EVENT_TIMELINE_HISTORY_READ",
	951:   "WAIT_EVENT_TIMELINE_HISTORY_SYNC",
	952:   "WAIT_EVENT_TIMELINE_HISTORY_WRITE",
	953:   "WAIT_EVENT_TWOPHASE_FILE_READ",
	954:   "WAIT_EVENT_TWOPHASE_FILE_SYNC",
	955:   "WAIT_EVENT_TWOPHASE_FILE_WRITE",
	956:   "WAIT_EVENT_WALSENDER_TIMELINE_HISTORY_READ",
	957:   "WAIT_EVENT_WAL_BOOTSTRAP_SYNC",
	958:   "WAIT_EVENT_WAL_BOOTSTRAP_WRITE",
	959:   "WAIT_EVENT_WAL_COPY_READ",
	960:   "WAIT_EVENT_WAL_COPY_SYNC",
	961:   "WAIT_EVENT_WAL_COPY_WRITE",
	962:   "WAIT_EVENT_WAL_INIT_SYNC",
	963:   "WAIT_EVENT_WAL_INIT_WRITE",
	964:   "WAIT_EVENT_WAL_READ",
	965:   "WAIT_EVENT_WAL_SYNC",
	966:   "WAIT_EVENT_WAL_SYNC_METHOD_ASSIGN",
	967:   "WAIT_EVENT_WAL_WRITE",
	10000: "WAIT_EVENT_IO_XACT_SYNC",
	10001: "AURORA_READER_MAIN",
	10002: "AURORA_RUNTIME_MAIN",
}

var Backend_WaitEvent_value = map[string]int32{
	"WAIT_EVENT_UNKNOWN":                                      0,
	"WAIT_EVENT_LWLOCK_SHMEM_INDEX_LOCK":                      101,
	"WAIT_EVENT_LWLOCK_OID_GEN_LOCK":                          102,
	"WAIT_EVENT_LWLOCK_XID_GEN_LOCK":                          103,
	"WAIT_EVENT_LWLOCK_PROC_ARRAY_LOCK":                       104,
	"WAIT_EVENT_LWLOCK_S_INVAL_READ_LOCK":                     105,
	"WAIT_EVENT_LWLOCK_S_INVAL_WRITE_LOCK":                    106,
	"WAIT_EVENT_LWLOCK_WAL_BUF_MAPPING_LOCK":                  107,
	"WAIT_EVENT_LWLOCK_WAL_WRITE_LOCK":                        108,
	"WAIT_EVENT_LWLOCK_CONTROL_FILE_LOCK":                     109,
	"WAIT_EVENT_LWLOCK_CHECKPOINT_LOCK":                       110,
	"WAIT_EVENT_LWLOCK_C_LOG_CONTROL_LOCK":                    111,
	"WAIT_EVENT_LWLOCK_SUBTRANS_CONTROL_LOCK":                 112,
	"WAIT_EVENT_LWLOCK_MULTI_XACT_GEN_LOCK":                   113,
	"WAIT_EVENT_LWLOCK_MULTI_XACT_OFFSET_CONTROL_LOCK":        114,
	"WAIT_EVENT_LWLOCK_MULTI_XACT_MEMBER_CONTROL_LOCK":        115,
	"WAIT_EVENT_LWLOCK_REL_CACHE_INIT_LOCK":                   116,
	"WAIT_EVENT_LWLOCK_CHECKPOINTER_COMM_LOCK":                117,
	"WAIT_EVENT_LWLOCK_TWO_PHASE_STATE_LOCK":                  118,
	"WAIT_EVENT_LWLOCK_TABLESPACE_CREATE_LOCK":                119,
	"WAIT_EVENT_LWLOCK_BTREE_VACUUM_LOCK":                     120,
	"WAIT_EVENT_LWLOCK_ADDIN_SHMEM_INIT_LOCK":                 121,
	"WAIT_EVENT_LWLOCK_AUTOVACUUM_LOCK":                       122,
	"WAIT_EVENT_LWLOCK_AUTOVACUUM_SCHEDULE_LOCK":              123,
	"WAIT_EVENT_LWLOCK_SYNC_SCAN_LOCK":                        124,
	"WAIT_EVENT_LWLOCK_RELATION_MAPPING_LOCK":                 125,
	"WAIT_EVENT_LWLOCK_ASYNC_CTL_LOCK":                        126,
	"WAIT_EVENT_LWLOCK_ASYNC_QUEUE_LOCK":                      127,
	"WAIT_EVENT_LWLOCK_SERIALIZABLE_XACT_HASH_LOCK":           128,
	"WAIT_EVENT_LWLOCK_SERIALIZABLE_FINISHED_LIST_LOCK":       129,
	"WAIT_EVENT_LWLOCK_SERIALIZABLE_PREDICATE_LOCK_LIST_LOCK": 130,
	"WAIT_EVENT_LWLOCK_OLD_SER_XID_LOCK":                      131,
	"WAIT_EVENT_LWLOCK_SYNC_REP_LOCK":                         132,
	"WAIT_EVENT_LWLOCK_BACKGROUND_WORKER_LOCK":                133,
	"WAIT_EVENT_LWLOCK_DYNAMIC_SHARD_MEMORY_CONTROL_LOCK":     134,
	"WAIT_EVENT_LWLOCK_AUTO_FILE_LOCK":                        135,
	"WAIT_EVENT_LWLOCK_REPLICATION_SLOT_ALLOCATION_LOCK":      136,
	"WAIT_EVENT_LWLOCK_REPLICATION_SLOT_CONTROL_LOCK":         137,
	"WAIT_EVENT_LWLOCK_COMMIT_TS_CONTROL_LOCK":                138,
	"WAIT_EVENT_LWLOCK_COMMIT_TS_LOCK":                        139,
	"WAIT_EVENT_LWLOCK_REPLICATION_ORIGIN_LOCK":               140,
	"WAIT_EVENT_LWLOCK_MULTI_XACT_TRUNCATION_LOCK":            141,
	"WAIT_EVENT_LWLOCK_OLD_SNAPSHOT_TIME_MAP_LOCK":            142,
	"WAIT_EVENT_LWLOCK_BACKEND_RANDOM_LOCK":                   143,
	"WAIT_EVENT_LWLOCK_LOGICAL_REP_WORKER_LOCK":               144,
	"WAIT_EVENT_LWLOCK_CLOG_TRUNCATION_LOCK":                  145,
	"WAIT_EVENT_LWTRANCHE_CLOG_BUFFERS":                       146,
	"WAIT_EVENT_LWTRANCHE_COMMITTS_BUFFERS":                   147,
	"WAIT_EVENT_LWTRANCHE_SUBTRANS_BUFFERS":                   148,
	"WAIT_EVENT_LWTRANCHE_MXACTOFFSET_BUFFERS":                149,
	"WAIT_EVENT_LWTRANCHE_MXACTMEMBER_BUFFERS":                150,
	"WAIT_EVENT_LWTRANCHE_ASYNC_BUFFERS":                      151,
	"WAIT_EVENT_LWTRANCHE_OLDSERXID_BUFFERS":                  152,
	"WAIT_EVENT_LWTRANCHE_WAL_INSERT":                         153,
	"WAIT_EVENT_LWTRANCHE_BUFFER_CONTENT":                     154,
	"WAIT_EVENT_LWTRANCHE_BUFFER_IO_IN_PROGRESS":              155,
	"WAIT_EVENT_LWTRANCHE_REPLICATION_ORIGIN":                 156,
	"WAIT_EVENT_LWTRANCHE_REPLICATION_SLOT_IO_IN_PROGRESS":    157,
	"WAIT_EVENT_LWTRANCHE_PROC":                               158,
	"WAIT_EVENT_LWTRANCHE_BUFFER_MAPPING":                     159,
	"WAIT_EVENT_LWTRANCHE_LOCK_MANAGER":                       160,
	"WAIT_EVENT_LWTRANCHE_PREDICATE_LOCK_MANAGER":             161,
	"WAIT_EVENT_LWTRANCHE_PARALLEL_HASH_JOIN":                 162,
	"WAIT_EVENT_LWTRANCHE_PARALLEL_QUERY_DSA":                 163,
	"WAIT_EVENT_LWTRANCHE_SESSION_DSA":                        164,
	"WAIT_EVENT_LWTRANCHE_SESSION_RECORD_TABLE":               165,
	"WAIT_EVENT_LWTRANCHE_SESSION_TYPMOD_TABLE":               166,
	"WAIT_EVENT_LWTRANCHE_SHARED_TUPLESTORE":                  167,
	"WAIT_EVENT_LWTRANCHE_TBM":                                168,
	"WAIT_EVENT_LWTRANCHE_PARALLEL_APPEND":                    169,
	"WAIT_EVENT_LOCKTAG_RELATION":                             200,
	"WAIT_EVENT_LOCKTAG_RELATION_EXTEND":                      201,
	"WAIT_EVENT_LOCKTAG_PAGE":                                 202,
	"WAIT_EVENT_LOCKTAG_TUPLE":                                203,
	"WAIT_EVENT_LOCKTAG_TRANSACTION":                          204,
	"WAIT_EVENT_LOCKTAG_VIRTUALTRANSACTION":                   205,
	"WAIT_EVENT_LOCKTAG_SPECULATIVE_TOKEN":                    206,
	"WAIT_EVENT_LOCKTAG_OBJECT":                               207,
	"WAIT_EVENT_LOCKTAG_USERLOCK":                             208,
	"WAIT_EVENT_LOCKTAG_ADVISORY":                             209,
	"WAIT_EVENT_BUFFER_PIN":                                   300,
	"WAIT_EVENT_EXTENSION":                                    400,
	"WAIT_EVENT_PG_STAT_STATEMENTS":                           401,
	"WAIT_EVENT_ARCHIVER_MAIN":                                500,
	"WAIT_EVENT_AUTOVACUUM_MAIN":                              501,
	"WAIT_EVENT_BGWRITER_HIBERNATE":                           502,
	"WAIT_EVENT_BGWRITER_MAIN":                                503,
	"WAIT_EVENT_CHECKPOINTER_MAIN":                            504,
	"WAIT_EVENT_LOGICAL_APPLY_MAIN":                           505,
	"WAIT_EVENT_LOGICAL_LAUNCHER_MAIN":                        506,
	"WAIT_EVENT_PGSTAT_MAIN":                                  507,
	"WAIT_EVENT_RECOVERY_WAL_ALL":                             508,
	"WAIT_EVENT_RECOVERY_WAL_STREAM":                          509,
	"WAIT_EVENT_SYSLOGGER_MAIN":                               510,
	"WAIT_EVENT_WAL_RECEIVER_MAIN":                            511,
	"WAIT_EVENT_WAL_SENDER_MAIN":                              512,
	"WAIT_EVENT_WAL_WRITER_MAIN":                              513,
	"WAIT_EVENT_CLIENT_READ":                                  600,
	"WAIT_EVENT_CLIENT_WRITE":                                 601,
	"WAIT_EVENT_LIBPQWALRECEIVER_CONNECT":                     602,
	"WAIT_EVENT_LIBPQWALRECEIVER_RECEIVE":                     603,
	"WAIT_EVENT_SSL_OPEN_SERVER":                              604,
	"WAIT_EVENT_WAL_RECEIVER_WAIT_START":                      605,
	"WAIT_EVENT_WAL_SENDER_WAIT_WAL":                          606,
	"WAIT_EVENT_WAL_SENDER_WRITE_DATA":                        607,
	"WAIT_EVENT_BGWORKER_SHUTDOWN":                            700,
	"WAIT_EVENT_BGWORKER_STARTUP":                             701,
	"WAIT_EVENT_BTREE_PAGE":                                   702,
	"WAIT_EVENT_CLOG_GROUP_UPDATE":                            703,
	"WAIT_EVENT_EXECUTE_GATHER":                               704,
	"WAIT_EVENT_HASH_BATCH_ALLOCATING":                        705,
	"WAIT_EVENT_HASH_BATCH_ELECTING":                          706,
	"WAIT_EVENT_HASH_BATCH_LOADING":                           707,
	"WAIT_EVENT_HASH_BUILD_ALLOCATING":                        708,
	"WAIT_EVENT_HASH_BUILD_ELECTING":                          709,
	"WAIT_EVENT_HASH_BUILD_HASHING_INNER":                     710,
	"WAIT_EVENT_HASH_BUILD_HASHING_OUTER":                     711,
	"WAIT_EVENT_HASH_GROW_BATCHES_ALLOCATING":                 712,
	"WAIT_EVENT_HASH_GROW_BATCHES_DECIDING":                   713,
	"WAIT_EVENT_HASH_GROW_BATCHES_ELECTING":                   714,
	"WAIT_EVENT_HASH_GROW_BATCHES_FINISHING":                  715,
	"WAIT_EVENT_HASH_GROW_BATCHES_REPARTITIONING":             716,
	"WAIT_EVENT_HASH_GROW_BUCKETS_ALLOCATING":                 717,
	"WAIT_EVENT_HASH_GROW_BUCKETS_ELECTING":                   718,
	"WAIT_EVENT_HASH_GROW_BUCKETS_REINSERTING":                719,
	"WAIT_EVENT_LOGICAL_SYNC_DATA":                            720,
	"WAIT_EVENT_LOGICAL_SYNC_STATE_CHANGE":                    721,
	"WAIT_EVENT_MQ_INTERNAL":                                  722,
	"WAIT_EVENT_MQ_PUT_MESSAGE":                               723,
	"WAIT_EVENT_MQ_RECEIVE":                                   724,
	"WAIT_EVENT_MQ_SEND":                                      725,
	"WAIT_EVENT_PARALLEL_BITMAP_SCAN":                         726,
	"WAIT_EVENT_PARALLEL_CREATE_INDEX_SCAN":                   727,
	"WAIT_EVENT_PARALLEL_FINISH":                              728,
	"WAIT_EVENT_PROCARRAY_GROUP_UPDATE":                       729,
	"WAIT_EVENT_PROMOTE":                                      730,
	"WAIT_EVENT_REPLICATION_ORIGIN_DROP":                      731,
	"WAIT_EVENT_REPLICATION_SLOT_DROP":                        732,
	"WAIT_EVENT_SAFE_SNAPSHOT":                                733,
	"WAIT_EVENT_SYNC_REP":                                     734,
	"WAIT_EVENT_BASE_BACKUP_THROTTLE":                         800,
	"WAIT_EVENT_PG_SLEEP":                                     801,
	"WAIT_EVENT_RECOVERY_APPLY_DELAY":                         802,
	"WAIT_EVENT_BUFFILE_READ":                                 900,
	"WAIT_EVENT_BUFFILE_WRITE":                                901,
	"WAIT_EVENT_CONTROL_FILE_READ":                            902,
	"WAIT_EVENT_CONTROL_FILE_SYNC":                            903,
	"WAIT_EVENT_CONTROL_FILE_SYNC_UPDATE":                     904,
	"WAIT_EVENT_CONTROL_FILE_WRITE":                           905,
	"WAIT_EVENT_CONTROL_FILE_WRITE_UPDATE":                    906,
	"WAIT_EVENT_COPY_FILE_READ":                               907,
	"WAIT_EVENT_COPY_FILE_WRITE":                              908,
	"WAIT_EVENT_DATA_FILE_EXTEND":                             909,
	"WAIT_EVENT_DATA_FILE_FLUSH":                              910,
	"WAIT_EVENT_DATA_FILE_IMMEDIATE_SYNC":                     911,
	"WAIT_EVENT_DATA_FILE_PREFETCH":                           912,
	"WAIT_EVENT_DATA_FILE_READ":                               913,
	"WAIT_EVENT_DATA_FILE_SYNC":                               914,
	"WAIT_EVENT_DATA_FILE_TRUNCATE":                           915,
	"WAIT_EVENT_DATA_FILE_WRITE":                              916,
	"WAIT_EVENT_DSM_FILL_ZERO_WRITE":                          917,
	"WAIT_EVENT_LOCK_FILE_ADDTODATADIR_READ":                  918,
	"WAIT_EVENT_LOCK_FILE_ADDTODATADIR_SYNC":                  919,
	"WAIT_EVENT_LOCK_FILE_ADDTODATADIR_WRITE":                 920,
	"WAIT_EVENT_LOCK_FILE_CREATE_READ":                        921,
	"WAIT_EVENT_LOCK_FILE_CREATE_SYNC":                        922,
	"WAIT_EVENT_LOCK_FILE_CREATE_WRITE":                       923,
	"WAIT_EVENT_LOCK_FILE_RECHECKDATADIR_READ":                924,
	"WAIT_EVENT_LOGICAL_REWRITE_CHECKPOINT_SYNC":              925,
	"WAIT_EVENT_LOGICAL_REWRITE_MAPPING_SYNC":                 926,
	"WAIT_EVENT_LOGICAL_REWRITE_MAPPING_WRITE":                927,
	"WAIT_EVENT_LOGICAL_REWRITE_SYNC":                         928,
	"WAIT_EVENT_LOGICAL_REWRITE_TRUNCATE":                     929,
	"WAIT_EVENT_LOGICAL_REWRITE_WRITE":                        930,
	"WAIT_EVENT_RELATION_MAP_READ":                            931,
	"WAIT_EVENT_RELATION_MAP_SYNC":                            932,
	"WAIT_EVENT_RELATION_MAP_WRITE":                           933,
	"WAIT_EVENT_REORDER_BUFFER_READ":                          934,
	"WAIT_EVENT_REORDER_BUFFER_WRITE":                         935,
	"WAIT_EVENT_REORDER_LOGICAL_MAPPING_READ":                 936,
	"WAIT_EVENT_REPLICATION_SLOT_READ":                        937,
	"WAIT_EVENT_REPLICATION_SLOT_RESTORE_SYNC":                938,
	"WAIT_EVENT_REPLICATION_SLOT_SYNC":                        939,
	"WAIT_EVENT_REPLICATION_SLOT_WRITE":                       940,
	"WAIT_EVENT_SLRU_FLUSH_SYNC":                              941,
	"WAIT_EVENT_SLRU_READ":                                    942,
	"WAIT_EVENT_SLRU_SYNC":                                    943,
	"WAIT_EVENT_SLRU_WRITE":                                   944,
	"WAIT_EVENT_SNAPBUILD_READ":                               945,
	"WAIT_EVENT_SNAPBUILD_SYNC":                               946,
	"WAIT_EVENT_SNAPBUILD_WRITE":                              947,
	"WAIT_EVENT_TIMELINE_HISTORY_FILE_SYNC":                   948,
	"WAIT_EVENT_TIMELINE_HISTORY_FILE_WRITE":                  949,
	"WAIT_EVENT_TIMELINE_HISTORY_READ":                        950,
	"WAIT_EVENT_TIMELINE_HISTORY_SYNC":                        951,
	"WAIT_EVENT_TIMELINE_HISTORY_WRITE":                       952,
	"WAIT_EVENT_TWOPHASE_FILE_READ":                           953,
	"WAIT_EVENT_TWOPHASE_FILE_SYNC":                           954,
	"WAIT_EVENT_TWOPHASE_FILE_WRITE":                          955,
	"WAIT_EVENT_WALSENDER_TIMELINE_HISTORY_READ":              956,
	"WAIT_EVENT_WAL_BOOTSTRAP_SYNC":                           957,
	"WAIT_EVENT_WAL_BOOTSTRAP_WRITE":                          958,
	"WAIT_EVENT_WAL_COPY_READ":                                959,
	"WAIT_EVENT_WAL_COPY_SYNC":                                960,
	"WAIT_EVENT_WAL_COPY_WRITE":                               961,
	"WAIT_EVENT_WAL_INIT_SYNC":                                962,
	"WAIT_EVENT_WAL_INIT_WRITE":                               963,
	"WAIT_EVENT_WAL_READ":                                     964,
	"WAIT_EVENT_WAL_SYNC":                                     965,
	"WAIT_EVENT_WAL_SYNC_METHOD_ASSIGN":                       966,
	"WAIT_EVENT_WAL_WRITE":                                    967,
	"WAIT_EVENT_IO_XACT_SYNC":                                 10000,
	"AURORA_READER_MAIN":                                      10001,
	"AURORA_RUNTIME_MAIN":                                     10002,
}

func (x Backend_WaitEvent) String() string {
	return proto.EnumName(Backend_WaitEvent_name, int32(x))
}

func (Backend_WaitEvent) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0f94e9081e673de, []int{1, 1}
}

type VacuumProgressStatistic_VacuumPhase int32

const (
	VacuumProgressStatistic_INITIALIZING  VacuumProgressStatistic_VacuumPhase = 0
	VacuumProgressStatistic_SCAN_HEAP     VacuumProgressStatistic_VacuumPhase = 1
	VacuumProgressStatistic_VACUUM_INDEX  VacuumProgressStatistic_VacuumPhase = 2
	VacuumProgressStatistic_VACUUM_HEAP   VacuumProgressStatistic_VacuumPhase = 3
	VacuumProgressStatistic_INDEX_CLEANUP VacuumProgressStatistic_VacuumPhase = 4
	VacuumProgressStatistic_TRUNCATE      VacuumProgressStatistic_VacuumPhase = 5
	VacuumProgressStatistic_FINAL_CLEANUP VacuumProgressStatistic_VacuumPhase = 6
)

var VacuumProgressStatistic_VacuumPhase_name = map[int32]string{
	0: "INITIALIZING",
	1: "SCAN_HEAP",
	2: "VACUUM_INDEX",
	3: "VACUUM_HEAP",
	4: "INDEX_CLEANUP",
	5: "TRUNCATE",
	6: "FINAL_CLEANUP",
}

var VacuumProgressStatistic_VacuumPhase_value = map[string]int32{
	"INITIALIZING":  0,
	"SCAN_HEAP":     1,
	"VACUUM_INDEX":  2,
	"VACUUM_HEAP":   3,
	"INDEX_CLEANUP": 4,
	"TRUNCATE":      5,
	"FINAL_CLEANUP": 6,
}

func (x VacuumProgressStatistic_VacuumPhase) String() string {
	return proto.EnumName(VacuumProgressStatistic_VacuumPhase_name, int32(x))
}

func (VacuumProgressStatistic_VacuumPhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0f94e9081e673de, []int{3, 0}
}

type CompactActivitySnapshot struct {
	PostgresVersion            *PostgresVersion             `protobuf:"bytes,1,opt,name=postgres_version,json=postgresVersion,proto3" json:"postgres_version,omitempty"`
	Backends                   []*Backend                   `protobuf:"bytes,2,rep,name=backends,proto3" json:"backends,omitempty"`
	VacuumProgressInformations []*VacuumProgressInformation `protobuf:"bytes,10,rep,name=vacuum_progress_informations,json=vacuumProgressInformations,proto3" json:"vacuum_progress_informations,omitempty"`
	VacuumProgressStatistics   []*VacuumProgressStatistic   `protobuf:"bytes,11,rep,name=vacuum_progress_statistics,json=vacuumProgressStatistics,proto3" json:"vacuum_progress_statistics,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                     `json:"-"`
	XXX_unrecognized           []byte                       `json:"-"`
	XXX_sizecache              int32                        `json:"-"`
}

func (m *CompactActivitySnapshot) Reset()         { *m = CompactActivitySnapshot{} }
func (m *CompactActivitySnapshot) String() string { return proto.CompactTextString(m) }
func (*CompactActivitySnapshot) ProtoMessage()    {}
func (*CompactActivitySnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0f94e9081e673de, []int{0}
}

func (m *CompactActivitySnapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompactActivitySnapshot.Unmarshal(m, b)
}
func (m *CompactActivitySnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompactActivitySnapshot.Marshal(b, m, deterministic)
}
func (m *CompactActivitySnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactActivitySnapshot.Merge(m, src)
}
func (m *CompactActivitySnapshot) XXX_Size() int {
	return xxx_messageInfo_CompactActivitySnapshot.Size(m)
}
func (m *CompactActivitySnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactActivitySnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_CompactActivitySnapshot proto.InternalMessageInfo

func (m *CompactActivitySnapshot) GetPostgresVersion() *PostgresVersion {
	if m != nil {
		return m.PostgresVersion
	}
	return nil
}

func (m *CompactActivitySnapshot) GetBackends() []*Backend {
	if m != nil {
		return m.Backends
	}
	return nil
}

func (m *CompactActivitySnapshot) GetVacuumProgressInformations() []*VacuumProgressInformation {
	if m != nil {
		return m.VacuumProgressInformations
	}
	return nil
}

func (m *CompactActivitySnapshot) GetVacuumProgressStatistics() []*VacuumProgressStatistic {
	if m != nil {
		return m.VacuumProgressStatistics
	}
	return nil
}

type Backend struct {
	Identity             uint64               `protobuf:"varint,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Pid                  int32                `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	HasRoleIdx           bool                 `protobuf:"varint,3,opt,name=has_role_idx,json=hasRoleIdx,proto3" json:"has_role_idx,omitempty"`
	RoleIdx              int32                `protobuf:"varint,4,opt,name=role_idx,json=roleIdx,proto3" json:"role_idx,omitempty"`
	HasDatabaseIdx       bool                 `protobuf:"varint,5,opt,name=has_database_idx,json=hasDatabaseIdx,proto3" json:"has_database_idx,omitempty"`
	DatabaseIdx          int32                `protobuf:"varint,6,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	HasQueryIdx          bool                 `protobuf:"varint,7,opt,name=has_query_idx,json=hasQueryIdx,proto3" json:"has_query_idx,omitempty"`
	QueryIdx             int32                `protobuf:"varint,8,opt,name=query_idx,json=queryIdx,proto3" json:"query_idx,omitempty"`
	QueryText            string               `protobuf:"bytes,9,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`
	ApplicationName      string               `protobuf:"bytes,10,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	ClientAddr           string               `protobuf:"bytes,11,opt,name=client_addr,json=clientAddr,proto3" json:"client_addr,omitempty"`
	ClientPort           int32                `protobuf:"varint,12,opt,name=client_port,json=clientPort,proto3" json:"client_port,omitempty"`
	BackendStart         *timestamp.Timestamp `protobuf:"bytes,13,opt,name=backend_start,json=backendStart,proto3" json:"backend_start,omitempty"`
	XactStart            *timestamp.Timestamp `protobuf:"bytes,14,opt,name=xact_start,json=xactStart,proto3" json:"xact_start,omitempty"`
	QueryStart           *timestamp.Timestamp `protobuf:"bytes,15,opt,name=query_start,json=queryStart,proto3" json:"query_start,omitempty"`
	StateChange          *timestamp.Timestamp `protobuf:"bytes,16,opt,name=state_change,json=stateChange,proto3" json:"state_change,omitempty"`
	Waiting              bool                 `protobuf:"varint,17,opt,name=waiting,proto3" json:"waiting,omitempty"`
	State                string               `protobuf:"bytes,18,opt,name=state,proto3" json:"state,omitempty"`
	WaitEventType        string               `protobuf:"bytes,19,opt,name=wait_event_type,json=waitEventType,proto3" json:"wait_event_type,omitempty"`
	WaitEvent            string               `protobuf:"bytes,20,opt,name=wait_event,json=waitEvent,proto3" json:"wait_event,omitempty"`
	BackendType          string               `protobuf:"bytes,21,opt,name=backend_type,json=backendType,proto3" json:"backend_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Backend) Reset()         { *m = Backend{} }
func (m *Backend) String() string { return proto.CompactTextString(m) }
func (*Backend) ProtoMessage()    {}
func (*Backend) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0f94e9081e673de, []int{1}
}

func (m *Backend) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Backend.Unmarshal(m, b)
}
func (m *Backend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Backend.Marshal(b, m, deterministic)
}
func (m *Backend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Backend.Merge(m, src)
}
func (m *Backend) XXX_Size() int {
	return xxx_messageInfo_Backend.Size(m)
}
func (m *Backend) XXX_DiscardUnknown() {
	xxx_messageInfo_Backend.DiscardUnknown(m)
}

var xxx_messageInfo_Backend proto.InternalMessageInfo

func (m *Backend) GetIdentity() uint64 {
	if m != nil {
		return m.Identity
	}
	return 0
}

func (m *Backend) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Backend) GetHasRoleIdx() bool {
	if m != nil {
		return m.HasRoleIdx
	}
	return false
}

func (m *Backend) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *Backend) GetHasDatabaseIdx() bool {
	if m != nil {
		return m.HasDatabaseIdx
	}
	return false
}

func (m *Backend) GetDatabaseIdx() int32 {
	if m != nil {
		return m.DatabaseIdx
	}
	return 0
}

func (m *Backend) GetHasQueryIdx() bool {
	if m != nil {
		return m.HasQueryIdx
	}
	return false
}

func (m *Backend) GetQueryIdx() int32 {
	if m != nil {
		return m.QueryIdx
	}
	return 0
}

func (m *Backend) GetQueryText() string {
	if m != nil {
		return m.QueryText
	}
	return ""
}

func (m *Backend) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *Backend) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

func (m *Backend) GetClientPort() int32 {
	if m != nil {
		return m.ClientPort
	}
	return 0
}

func (m *Backend) GetBackendStart() *timestamp.Timestamp {
	if m != nil {
		return m.BackendStart
	}
	return nil
}

func (m *Backend) GetXactStart() *timestamp.Timestamp {
	if m != nil {
		return m.XactStart
	}
	return nil
}

func (m *Backend) GetQueryStart() *timestamp.Timestamp {
	if m != nil {
		return m.QueryStart
	}
	return nil
}

func (m *Backend) GetStateChange() *timestamp.Timestamp {
	if m != nil {
		return m.StateChange
	}
	return nil
}

func (m *Backend) GetWaiting() bool {
	if m != nil {
		return m.Waiting
	}
	return false
}

func (m *Backend) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Backend) GetWaitEventType() string {
	if m != nil {
		return m.WaitEventType
	}
	return ""
}

func (m *Backend) GetWaitEvent() string {
	if m != nil {
		return m.WaitEvent
	}
	return ""
}

func (m *Backend) GetBackendType() string {
	if m != nil {
		return m.BackendType
	}
	return ""
}

type VacuumProgressInformation struct {
	VacuumIdentity       uint64               `protobuf:"varint,1,opt,name=vacuum_identity,json=vacuumIdentity,proto3" json:"vacuum_identity,omitempty"`
	RoleIdx              int32                `protobuf:"varint,2,opt,name=role_idx,json=roleIdx,proto3" json:"role_idx,omitempty"`
	DatabaseIdx          int32                `protobuf:"varint,3,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	RelationIdx          int32                `protobuf:"varint,4,opt,name=relation_idx,json=relationIdx,proto3" json:"relation_idx,omitempty"`
	BackendIdentity      uint64               `protobuf:"varint,5,opt,name=backend_identity,json=backendIdentity,proto3" json:"backend_identity,omitempty"`
	StartedAt            *timestamp.Timestamp `protobuf:"bytes,6,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	Autovacuum           bool                 `protobuf:"varint,7,opt,name=autovacuum,proto3" json:"autovacuum,omitempty"`
	Toast                bool                 `protobuf:"varint,8,opt,name=toast,proto3" json:"toast,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *VacuumProgressInformation) Reset()         { *m = VacuumProgressInformation{} }
func (m *VacuumProgressInformation) String() string { return proto.CompactTextString(m) }
func (*VacuumProgressInformation) ProtoMessage()    {}
func (*VacuumProgressInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0f94e9081e673de, []int{2}
}

func (m *VacuumProgressInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VacuumProgressInformation.Unmarshal(m, b)
}
func (m *VacuumProgressInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VacuumProgressInformation.Marshal(b, m, deterministic)
}
func (m *VacuumProgressInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VacuumProgressInformation.Merge(m, src)
}
func (m *VacuumProgressInformation) XXX_Size() int {
	return xxx_messageInfo_VacuumProgressInformation.Size(m)
}
func (m *VacuumProgressInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_VacuumProgressInformation.DiscardUnknown(m)
}

var xxx_messageInfo_VacuumProgressInformation proto.InternalMessageInfo

func (m *VacuumProgressInformation) GetVacuumIdentity() uint64 {
	if m != nil {
		return m.VacuumIdentity
	}
	return 0
}

func (m *VacuumProgressInformation) GetRoleIdx() int32 {
	if m != nil {
		return m.RoleIdx
	}
	return 0
}

func (m *VacuumProgressInformation) GetDatabaseIdx() int32 {
	if m != nil {
		return m.DatabaseIdx
	}
	return 0
}

func (m *VacuumProgressInformation) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

func (m *VacuumProgressInformation) GetBackendIdentity() uint64 {
	if m != nil {
		return m.BackendIdentity
	}
	return 0
}

func (m *VacuumProgressInformation) GetStartedAt() *timestamp.Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *VacuumProgressInformation) GetAutovacuum() bool {
	if m != nil {
		return m.Autovacuum
	}
	return false
}

func (m *VacuumProgressInformation) GetToast() bool {
	if m != nil {
		return m.Toast
	}
	return false
}

type VacuumProgressStatistic struct {
	VacuumIdentity       uint64                              `protobuf:"varint,1,opt,name=vacuum_identity,json=vacuumIdentity,proto3" json:"vacuum_identity,omitempty"`
	Phase                VacuumProgressStatistic_VacuumPhase `protobuf:"varint,2,opt,name=phase,proto3,enum=pganalyze.collector.VacuumProgressStatistic_VacuumPhase" json:"phase,omitempty"`
	HeapBlksTotal        int64                               `protobuf:"varint,3,opt,name=heap_blks_total,json=heapBlksTotal,proto3" json:"heap_blks_total,omitempty"`
	HeapBlksScanned      int64                               `protobuf:"varint,4,opt,name=heap_blks_scanned,json=heapBlksScanned,proto3" json:"heap_blks_scanned,omitempty"`
	HeapBlksVacuumed     int64                               `protobuf:"varint,5,opt,name=heap_blks_vacuumed,json=heapBlksVacuumed,proto3" json:"heap_blks_vacuumed,omitempty"`
	IndexVacuumCount     int64                               `protobuf:"varint,6,opt,name=index_vacuum_count,json=indexVacuumCount,proto3" json:"index_vacuum_count,omitempty"`
	MaxDeadTuples        int64                               `protobuf:"varint,7,opt,name=max_dead_tuples,json=maxDeadTuples,proto3" json:"max_dead_tuples,omitempty"`
	NumDeadTuples        int64                               `protobuf:"varint,8,opt,name=num_dead_tuples,json=numDeadTuples,proto3" json:"num_dead_tuples,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *VacuumProgressStatistic) Reset()         { *m = VacuumProgressStatistic{} }
func (m *VacuumProgressStatistic) String() string { return proto.CompactTextString(m) }
func (*VacuumProgressStatistic) ProtoMessage()    {}
func (*VacuumProgressStatistic) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0f94e9081e673de, []int{3}
}

func (m *VacuumProgressStatistic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VacuumProgressStatistic.Unmarshal(m, b)
}
func (m *VacuumProgressStatistic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VacuumProgressStatistic.Marshal(b, m, deterministic)
}
func (m *VacuumProgressStatistic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VacuumProgressStatistic.Merge(m, src)
}
func (m *VacuumProgressStatistic) XXX_Size() int {
	return xxx_messageInfo_VacuumProgressStatistic.Size(m)
}
func (m *VacuumProgressStatistic) XXX_DiscardUnknown() {
	xxx_messageInfo_VacuumProgressStatistic.DiscardUnknown(m)
}

var xxx_messageInfo_VacuumProgressStatistic proto.InternalMessageInfo

func (m *VacuumProgressStatistic) GetVacuumIdentity() uint64 {
	if m != nil {
		return m.VacuumIdentity
	}
	return 0
}

func (m *VacuumProgressStatistic) GetPhase() VacuumProgressStatistic_VacuumPhase {
	if m != nil {
		return m.Phase
	}
	return VacuumProgressStatistic_INITIALIZING
}

func (m *VacuumProgressStatistic) GetHeapBlksTotal() int64 {
	if m != nil {
		return m.HeapBlksTotal
	}
	return 0
}

func (m *VacuumProgressStatistic) GetHeapBlksScanned() int64 {
	if m != nil {
		return m.HeapBlksScanned
	}
	return 0
}

func (m *VacuumProgressStatistic) GetHeapBlksVacuumed() int64 {
	if m != nil {
		return m.HeapBlksVacuumed
	}
	return 0
}

func (m *VacuumProgressStatistic) GetIndexVacuumCount() int64 {
	if m != nil {
		return m.IndexVacuumCount
	}
	return 0
}

func (m *VacuumProgressStatistic) GetMaxDeadTuples() int64 {
	if m != nil {
		return m.MaxDeadTuples
	}
	return 0
}

func (m *VacuumProgressStatistic) GetNumDeadTuples() int64 {
	if m != nil {
		return m.NumDeadTuples
	}
	return 0
}

func init() {
	proto.RegisterEnum("pganalyze.collector.Backend_WaitEventType", Backend_WaitEventType_name, Backend_WaitEventType_value)
	proto.RegisterEnum("pganalyze.collector.Backend_WaitEvent", Backend_WaitEvent_name, Backend_WaitEvent_value)
	proto.RegisterEnum("pganalyze.collector.VacuumProgressStatistic_VacuumPhase", VacuumProgressStatistic_VacuumPhase_name, VacuumProgressStatistic_VacuumPhase_value)
	proto.RegisterType((*CompactActivitySnapshot)(nil), "pganalyze.collector.CompactActivitySnapshot")
	proto.RegisterType((*Backend)(nil), "pganalyze.collector.Backend")
	proto.RegisterType((*VacuumProgressInformation)(nil), "pganalyze.collector.VacuumProgressInformation")
	proto.RegisterType((*VacuumProgressStatistic)(nil), "pganalyze.collector.VacuumProgressStatistic")
}

func init() { proto.RegisterFile("compact_activity_snapshot.proto", fileDescriptor_a0f94e9081e673de) }

var fileDescriptor_a0f94e9081e673de = []byte{
	// 3655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x9a, 0xe9, 0x77, 0xe3, 0xc6,
	0x91, 0xc0, 0x8d, 0xa1, 0x38, 0xd4, 0xb4, 0xa4, 0x51, 0xbb, 0x3d, 0xb6, 0x69, 0xf9, 0x18, 0x59,
	0xb1, 0xc7, 0x1a, 0x7b, 0x22, 0x27, 0x13, 0xbf, 0x8d, 0xfd, 0x76, 0xf7, 0xed, 0x6b, 0x02, 0x2d,
	0x12, 0x11, 0x08, 0x40, 0x0d, 0x40, 0x1c, 0xe5, 0x0b, 0x1e, 0x46, 0x84, 0x47, 0x8c, 0x25, 0x92,
	0x26, 0xa1, 0x89, 0x26, 0x7b, 0x25, 0xd9, 0x38, 0xf7, 0xe1, 0x71, 0xe2, 0x1c, 0xce, 0x65, 0x3b,
	0xf7, 0x6e, 0xf6, 0xbe, 0x77, 0x73, 0x39, 0xf7, 0xe1, 0x5c, 0x7b, 0xe6, 0xde, 0x7f, 0x62, 0xef,
	0xfb, 0x75, 0x37, 0x00, 0x82, 0x0d, 0x50, 0x9c, 0x7c, 0x93, 0xba, 0x7f, 0x5d, 0x5d, 0x5d, 0x5d,
	0x55, 0x5d, 0xdd, 0x04, 0x38, 0xbd, 0xd3, 0xdb, 0xef, 0x07, 0x3b, 0x91, 0x1f, 0xec, 0x44, 0x9d,
	0xcb, 0x9d, 0xe8, 0x8a, 0x3f, 0xec, 0x06, 0xfd, 0xe1, 0x6e, 0x2f, 0x5a, 0xeb, 0x0f, 0x7a, 0x51,
	0x0f, 0xdd, 0xd0, 0xbf, 0x14, 0x74, 0x83, 0xbd, 0x2b, 0xaf, 0x0a, 0xd7, 0x76, 0x7a, 0x7b, 0x7b,
	0xe1, 0x4e, 0xd4, 0x1b, 0x2c, 0x9d, 0xbe, 0xd4, 0xeb, 0x5d, 0xda, 0x0b, 0xef, 0xe7, 0xc8, 0xc5,
	0x83, 0x87, 0xef, 0x8f, 0x3a, 0xfb, 0xe1, 0x30, 0x0a, 0xf6, 0xfb, 0x62, 0xd4, 0xd2, 0xfc, 0x70,
	0x37, 0x18, 0x84, 0x6d, 0xf1, 0xdf, 0xca, 0x6b, 0x4b, 0xe0, 0x66, 0x55, 0xcc, 0x83, 0xe3, 0x69,
	0x9c, 0x78, 0x16, 0x64, 0x01, 0xd8, 0xef, 0x0d, 0xa3, 0x4b, 0x83, 0x70, 0xe8, 0x5f, 0x0e, 0x07,
	0xc3, 0x4e, 0xaf, 0x5b, 0x55, 0x96, 0x95, 0xd5, 0xb9, 0xf3, 0x77, 0xad, 0x15, 0x4c, 0xbd, 0x66,
	0xc7, 0xf0, 0x96, 0x60, 0xe9, 0x62, 0x7f, 0xbc, 0x01, 0x3d, 0x08, 0x66, 0x2f, 0x06, 0x3b, 0x8f,
	0x84, 0xdd, 0xf6, 0xb0, 0x7a, 0x6c, 0xb9, 0xb4, 0x3a, 0x77, 0xfe, 0xb6, 0x42, 0x41, 0x35, 0x01,
	0xd1, 0x94, 0x46, 0x7d, 0x70, 0xdb, 0xe5, 0x60, 0xe7, 0xe0, 0x60, 0xdf, 0xef, 0x0f, 0x7a, 0x4c,
	0xe4, 0xd0, 0xef, 0x74, 0x1f, 0xee, 0x0d, 0xf6, 0x83, 0xa8, 0xd3, 0xeb, 0x0e, 0xab, 0x80, 0x4b,
	0x5b, 0x2b, 0x94, 0xb6, 0xc5, 0x07, 0xda, 0xf1, 0x38, 0x7d, 0x34, 0x8c, 0x2e, 0x5d, 0x9e, 0xd4,
	0x35, 0x44, 0xaf, 0x00, 0x4b, 0xf2, 0x8c, 0xc3, 0x28, 0x88, 0x3a, 0xc3, 0xa8, 0xb3, 0x33, 0xac,
	0xce, 0xf1, 0xf9, 0xce, 0x5d, 0xc3, 0x7c, 0x4e, 0x32, 0x88, 0x56, 0x2f, 0x17, 0x77, 0x0c, 0x57,
	0x9e, 0xd7, 0x41, 0x25, 0x5e, 0x33, 0x5a, 0x02, 0xb3, 0x9d, 0x76, 0xd8, 0x8d, 0x3a, 0xd1, 0x15,
	0x6e, 0xec, 0x19, 0x9a, 0xfe, 0x8f, 0x20, 0x28, 0xf5, 0x3b, 0xed, 0xea, 0xb1, 0x65, 0x65, 0xb5,
	0x4c, 0xd9, 0x9f, 0x68, 0x19, 0xcc, 0xef, 0x06, 0x43, 0x7f, 0xd0, 0xdb, 0x0b, 0xfd, 0x4e, 0xfb,
	0xb0, 0x5a, 0x5a, 0x56, 0x56, 0x67, 0x29, 0xd8, 0x0d, 0x86, 0xb4, 0xb7, 0x17, 0xea, 0xed, 0x43,
	0x74, 0x0b, 0x98, 0x4d, 0x7b, 0x67, 0xf8, 0xc0, 0xca, 0x20, 0xee, 0x5a, 0x05, 0x90, 0x0d, 0x6e,
	0x07, 0x51, 0x70, 0x31, 0x18, 0x0a, 0xa4, 0xcc, 0x05, 0x9c, 0xdc, 0x0d, 0x86, 0x5a, 0xdc, 0xcc,
	0xc8, 0x3b, 0xc1, 0xfc, 0x18, 0x75, 0x9c, 0x0b, 0x9a, 0x6b, 0x67, 0x90, 0x15, 0xb0, 0xc0, 0x84,
	0x3d, 0x7a, 0x10, 0x0e, 0xae, 0x70, 0xa6, 0xc2, 0x25, 0xcd, 0xed, 0x06, 0xc3, 0x4d, 0xd6, 0xc6,
	0x98, 0x5b, 0xc1, 0x89, 0x51, 0xff, 0x2c, 0x97, 0x31, 0xfb, 0x68, 0xd2, 0x79, 0x3b, 0x00, 0xa2,
	0x33, 0x0a, 0x0f, 0xa3, 0xea, 0x89, 0x65, 0x65, 0xf5, 0x04, 0x15, 0xb8, 0x1b, 0x1e, 0x46, 0xe8,
	0x2c, 0x80, 0x41, 0xbf, 0xbf, 0xd7, 0xd9, 0xe1, 0xfb, 0xe3, 0x77, 0x83, 0xfd, 0xb0, 0x0a, 0x38,
	0xb4, 0x98, 0x69, 0x37, 0x83, 0xfd, 0x10, 0x9d, 0x06, 0x73, 0x3b, 0x7b, 0x9d, 0xb0, 0x1b, 0xf9,
	0x41, 0xbb, 0x3d, 0xa8, 0xce, 0x71, 0x0a, 0x88, 0x26, 0xdc, 0x6e, 0x0f, 0x32, 0x40, 0xbf, 0x37,
	0x88, 0xaa, 0xf3, 0x5c, 0x93, 0x18, 0xb0, 0x7b, 0x83, 0x08, 0xfd, 0x0a, 0x58, 0x88, 0x5d, 0x8f,
	0x6d, 0xfa, 0x20, 0xaa, 0x2e, 0x70, 0xb7, 0x5f, 0x5a, 0x13, 0xc1, 0xb5, 0x96, 0x04, 0xd7, 0x9a,
	0x9b, 0x04, 0x17, 0x9d, 0x8f, 0x07, 0x38, 0x8c, 0x47, 0x0f, 0x01, 0x70, 0xc8, 0x42, 0x57, 0x8c,
	0x3e, 0x39, 0x75, 0xf4, 0x09, 0x46, 0x8b, 0xa1, 0xbf, 0x08, 0xe6, 0x84, 0x1d, 0xc4, 0xd8, 0xc5,
	0xa9, 0x63, 0x85, 0xd9, 0xc4, 0xe0, 0x5f, 0x06, 0xf3, 0xcc, 0x4b, 0x43, 0x7f, 0x67, 0x37, 0xe8,
	0x5e, 0x0a, 0xab, 0x70, 0xea, 0xe8, 0x39, 0xce, 0xab, 0x1c, 0x47, 0x55, 0x50, 0x79, 0x65, 0xd0,
	0x89, 0x3a, 0xdd, 0x4b, 0xd5, 0xeb, 0xf9, 0xf6, 0x25, 0xff, 0xa2, 0x53, 0xa0, 0xcc, 0xc1, 0x2a,
	0xe2, 0xd6, 0x14, 0xff, 0xa0, 0x33, 0x60, 0x91, 0x01, 0x7e, 0x78, 0x99, 0x19, 0x33, 0xba, 0xd2,
	0x0f, 0xab, 0x37, 0xf0, 0xfe, 0x05, 0xd6, 0x4c, 0x58, 0xab, 0x7b, 0xa5, 0x1f, 0xb2, 0xbd, 0x1d,
	0x71, 0xd5, 0x53, 0x62, 0x6f, 0x53, 0x84, 0xb9, 0x57, 0x62, 0x6e, 0x2e, 0xe3, 0x46, 0x0e, 0xcc,
	0xc5, 0x6d, 0x4c, 0xc2, 0xca, 0xd5, 0x63, 0x60, 0xa1, 0x35, 0x26, 0xf3, 0x46, 0x70, 0xbd, 0x5d,
	0xf7, 0x5b, 0x58, 0x77, 0x7d, 0xcf, 0xd4, 0xc8, 0xba, 0x6e, 0x12, 0x0d, 0x5e, 0x87, 0xaa, 0xe0,
	0x54, 0xd2, 0x6c, 0xb4, 0x0c, 0x4b, 0xdd, 0xf0, 0x4d, 0xdc, 0x24, 0x1a, 0x54, 0xd0, 0x12, 0xb8,
	0x49, 0xea, 0x71, 0x29, 0x36, 0xd5, 0x06, 0x81, 0xc7, 0x10, 0x04, 0xf3, 0x69, 0x9f, 0xa5, 0x6e,
	0xc0, 0x12, 0xba, 0x09, 0xa0, 0xa4, 0xa5, 0xe6, 0xad, 0xaf, 0x13, 0xea, 0xdb, 0xba, 0x09, 0x67,
	0x10, 0x02, 0x27, 0xc7, 0xa5, 0xc0, 0x32, 0x3a, 0x05, 0x60, 0xd2, 0x86, 0x55, 0x57, 0xdf, 0xd2,
	0xdd, 0x6d, 0x78, 0x3c, 0x4b, 0xaa, 0x86, 0x4e, 0x4c, 0x17, 0x56, 0xb2, 0x4a, 0x93, 0x0b, 0x2e,
	0x31, 0x1d, 0xdd, 0x32, 0xe1, 0x2c, 0x5a, 0x04, 0x73, 0x49, 0xb3, 0x6e, 0xab, 0xf0, 0x04, 0xba,
	0x01, 0x2c, 0x26, 0x0d, 0xae, 0xde, 0x24, 0x96, 0xe7, 0x42, 0x80, 0x4e, 0x02, 0x90, 0x52, 0x16,
	0x9c, 0x5b, 0x79, 0x12, 0x83, 0x13, 0xa9, 0x4d, 0x98, 0xc2, 0x42, 0xee, 0x16, 0x31, 0x99, 0x49,
	0x36, 0x4c, 0xab, 0x65, 0xc2, 0xeb, 0xd0, 0x19, 0xb0, 0x92, 0x69, 0x8f, 0x57, 0xee, 0x34, 0x9a,
	0xa4, 0xe9, 0xeb, 0xa6, 0x46, 0x2e, 0x88, 0x05, 0x87, 0x68, 0x05, 0xdc, 0x91, 0xe7, 0x2c, 0x5d,
	0xf3, 0xeb, 0xc4, 0x14, 0xcc, 0xc3, 0xc5, 0xcc, 0x85, 0x2c, 0x73, 0x09, 0xdd, 0x0d, 0xee, 0xcc,
	0x33, 0x36, 0xb5, 0x54, 0x1f, 0x53, 0x8a, 0xb7, 0x05, 0xb6, 0x8b, 0xee, 0x01, 0x2f, 0x28, 0x50,
	0xcb, 0xd7, 0xcd, 0x2d, 0x6c, 0xf8, 0x94, 0x60, 0x4d, 0x80, 0x1d, 0xb4, 0x0a, 0xee, 0x9a, 0x0c,
	0xb6, 0xa8, 0xee, 0x12, 0x41, 0xbe, 0x02, 0xdd, 0x0b, 0xce, 0xe4, 0xc9, 0x16, 0x36, 0xd8, 0x06,
	0xfa, 0x4d, 0x6c, 0xdb, 0xba, 0x59, 0x17, 0xec, 0x23, 0xe8, 0x2e, 0xb0, 0x5c, 0xcc, 0x66, 0x24,
	0xee, 0x15, 0x2b, 0xa9, 0x5a, 0xa6, 0x4b, 0x2d, 0xc3, 0x5f, 0xd7, 0x8d, 0x18, 0xdc, 0x2f, 0x5e,
	0xb4, 0xda, 0x20, 0xea, 0x86, 0x6d, 0xe9, 0x66, 0xec, 0x54, 0xdd, 0xe2, 0xb5, 0xa8, 0xbe, 0x61,
	0xd5, 0x53, 0xa9, 0x9c, 0xec, 0xa1, 0xfb, 0xc0, 0x3d, 0x05, 0xab, 0xf6, 0x6a, 0xcc, 0x65, 0x9d,
	0x71, 0xb8, 0x8f, 0xce, 0x82, 0xbb, 0xf3, 0x70, 0xd3, 0x33, 0x5c, 0xdd, 0xbf, 0x80, 0x55, 0x77,
	0xb4, 0x3b, 0x8f, 0xa2, 0x07, 0xc0, 0x8b, 0x8e, 0x44, 0xad, 0xf5, 0x75, 0x87, 0xb8, 0xe3, 0x13,
	0x0c, 0xa6, 0x8e, 0x6a, 0x92, 0x66, 0x8d, 0xd0, 0xf1, 0x51, 0xc3, 0x62, 0xb5, 0x28, 0x31, 0x7c,
	0x15, 0xab, 0x0d, 0xe2, 0xeb, 0x66, 0x12, 0x6d, 0x11, 0x3a, 0x07, 0x56, 0x8f, 0xb2, 0x1f, 0x97,
	0xdd, 0x6c, 0x0a, 0xfa, 0xa0, 0x78, 0xa3, 0xdd, 0x96, 0xe5, 0xdb, 0x0d, 0xec, 0x10, 0xdf, 0x71,
	0x71, 0xb2, 0x85, 0x97, 0x8b, 0x25, 0xbb, 0xb8, 0x66, 0x10, 0xc7, 0xc6, 0x2a, 0xf1, 0x55, 0x4a,
	0x52, 0xfa, 0x95, 0xc5, 0x1b, 0x5e, 0x73, 0x29, 0x21, 0xfe, 0x16, 0x56, 0x3d, 0x2f, 0x56, 0xe1,
	0xb0, 0x78, 0x7f, 0xb0, 0xa6, 0xe9, 0x66, 0x1a, 0x5b, 0xc9, 0xea, 0xae, 0x14, 0x7b, 0x07, 0xf6,
	0x5c, 0x2b, 0x2b, 0xf3, 0x55, 0x68, 0x0d, 0xdc, 0x7b, 0x24, 0xe6, 0xa8, 0x0d, 0xa2, 0x79, 0x89,
	0xd3, 0xfd, 0x6a, 0xb1, 0x0f, 0x3b, 0xdb, 0xa6, 0xea, 0x3b, 0x2a, 0x8e, 0x77, 0xfc, 0xd7, 0x8a,
	0x35, 0xa5, 0xc4, 0xc0, 0xae, 0x6e, 0x99, 0xe3, 0x61, 0xf1, 0xeb, 0xc5, 0x22, 0x31, 0x97, 0xa9,
	0xba, 0xf1, 0xc6, 0xfe, 0x46, 0x71, 0x4a, 0x11, 0xd4, 0xa6, 0x47, 0xbc, 0x58, 0xc1, 0xdf, 0x44,
	0xe7, 0xc1, 0x0b, 0x0b, 0x14, 0x24, 0x54, 0xc7, 0x86, 0xfe, 0x72, 0xb6, 0x05, 0xc2, 0x7b, 0x1a,
	0xd8, 0x69, 0x88, 0x21, 0xaf, 0x56, 0xd0, 0x2f, 0x80, 0x17, 0x4f, 0x19, 0xb3, 0xae, 0x9b, 0xba,
	0xd3, 0x20, 0x9a, 0x6f, 0xe8, 0x4e, 0x6c, 0xe2, 0xd7, 0x28, 0xe8, 0x97, 0xc0, 0x4b, 0xa7, 0x8c,
	0xb3, 0x29, 0xd1, 0x74, 0x35, 0xd9, 0xec, 0xcc, 0xe8, 0xd7, 0x2a, 0xe8, 0x9e, 0xa2, 0x15, 0x59,
	0x86, 0xc6, 0x24, 0xf0, 0x04, 0xc7, 0xc1, 0xdf, 0x52, 0xd0, 0x5d, 0xe0, 0xf4, 0x04, 0x9b, 0x53,
	0x62, 0x0b, 0xea, 0x75, 0x0a, 0x7a, 0x61, 0x91, 0xd3, 0xd5, 0xb0, 0xba, 0x51, 0xa7, 0x96, 0x67,
	0x6a, 0x7e, 0xcb, 0xa2, 0x1b, 0x84, 0x0a, 0xfc, 0x31, 0x05, 0x3d, 0x08, 0x5e, 0x92, 0xc7, 0xb5,
	0x6d, 0x13, 0x37, 0x75, 0xd5, 0x77, 0x1a, 0x98, 0x6a, 0x2c, 0xc2, 0x2c, 0xba, 0x3d, 0x1e, 0x61,
	0xaf, 0x57, 0xd0, 0xdd, 0x85, 0xfb, 0xe5, 0xb9, 0x56, 0x26, 0x3b, 0xbd, 0x41, 0x41, 0x2f, 0x05,
	0xe7, 0x8b, 0x7c, 0xc0, 0x36, 0x98, 0x3d, 0x98, 0x1b, 0x38, 0x86, 0xe5, 0xfa, 0xd8, 0x30, 0xac,
	0xf8, 0x7f, 0x3e, 0xf0, 0x8d, 0x0a, 0x7a, 0x00, 0xdc, 0x7f, 0x0d, 0x03, 0xc7, 0xb4, 0x7a, 0xd3,
	0x84, 0xe5, 0xb3, 0x00, 0x66, 0xc7, 0x99, 0x94, 0xbd, 0xde, 0x3c, 0x61, 0x11, 0x23, 0x9c, 0x63,
	0x6f, 0x51, 0xd0, 0x1a, 0x38, 0x7b, 0xb4, 0x2e, 0x16, 0xd5, 0xeb, 0x7a, 0xac, 0xfb, 0x5b, 0x15,
	0xf4, 0x62, 0x70, 0xee, 0xc8, 0xa4, 0xe5, 0x52, 0xcf, 0xcc, 0x2e, 0xf7, 0x6d, 0x13, 0x86, 0x70,
	0x37, 0x30, 0xb1, 0xed, 0x34, 0x2c, 0x71, 0x1a, 0xb3, 0xa0, 0x11, 0x43, 0xde, 0xae, 0xa0, 0x7b,
	0x8b, 0x92, 0x1c, 0xdb, 0x6a, 0x62, 0x6a, 0x3e, 0xc5, 0xa6, 0x66, 0xc5, 0xf1, 0xfd, 0x8e, 0x09,
	0x2b, 0x30, 0xac, 0xba, 0xae, 0xf2, 0x33, 0xcf, 0x1e, 0xf3, 0x8b, 0xc7, 0x15, 0x74, 0x5f, 0x51,
	0x9e, 0x53, 0xd9, 0x69, 0x21, 0xeb, 0x7e, 0x55, 0x41, 0x67, 0xa4, 0x24, 0x13, 0x17, 0x37, 0x82,
	0x17, 0x25, 0x8c, 0x03, 0x9f, 0xc8, 0x2b, 0x9c, 0x72, 0xdc, 0xe0, 0xae, 0x93, 0xb2, 0xef, 0x9c,
	0xcc, 0xa6, 0x07, 0x51, 0xc2, 0xbe, 0x2b, 0xbf, 0xe9, 0x09, 0xdb, 0x64, 0xc6, 0x8e, 0x8f, 0x95,
	0x04, 0x7f, 0x72, 0x0a, 0x1e, 0x9f, 0x27, 0x09, 0xfe, 0xee, 0x7c, 0x80, 0x26, 0xb8, 0xc8, 0x3a,
	0x09, 0xf8, 0x9e, 0xbc, 0xcd, 0x12, 0xd0, 0x32, 0x34, 0x87, 0x50, 0x16, 0xca, 0x09, 0xfc, 0xde,
	0x7c, 0x34, 0x27, 0x30, 0x2b, 0x04, 0x74, 0xd3, 0x21, 0xd4, 0x85, 0xef, 0x53, 0xd0, 0xaa, 0x74,
	0x28, 0x24, 0x54, 0x5c, 0x17, 0x32, 0x77, 0x66, 0xd5, 0xdd, 0x53, 0x0a, 0xba, 0x5f, 0xca, 0xe0,
	0x12, 0xa9, 0x5b, 0xbe, 0x6e, 0xb2, 0x5a, 0xa8, 0x4e, 0x89, 0xe3, 0xc0, 0xf7, 0x2b, 0xe8, 0x9c,
	0x94, 0x9c, 0x93, 0x01, 0x79, 0xb7, 0x86, 0x1f, 0x50, 0xd0, 0x43, 0xe0, 0x81, 0xa9, 0x34, 0x0f,
	0x48, 0x69, 0xa2, 0x0f, 0x2a, 0xe8, 0x0e, 0x70, 0x4b, 0xe1, 0x50, 0x56, 0x98, 0xc1, 0x0f, 0x4d,
	0x5d, 0x63, 0x7c, 0x4c, 0xc0, 0x0f, 0x4f, 0xf6, 0x33, 0x11, 0x5e, 0xd8, 0xc4, 0x75, 0x42, 0xe1,
	0xd3, 0x0a, 0x7a, 0x11, 0xb8, 0x6f, 0xc2, 0x8c, 0x63, 0x69, 0x38, 0x19, 0xf1, 0xcc, 0x64, 0x63,
	0xd8, 0x98, 0x62, 0xc3, 0x20, 0x86, 0x38, 0x28, 0x5e, 0x66, 0xe9, 0x26, 0x7c, 0xf6, 0x1a, 0xe8,
	0x4d, 0x8f, 0xd0, 0x6d, 0x5f, 0x73, 0x30, 0xfc, 0x48, 0x3e, 0xc7, 0xa4, 0x9e, 0x4c, 0x1c, 0x56,
	0x83, 0x73, 0xec, 0xa3, 0xf9, 0x08, 0x95, 0x31, 0x4a, 0x54, 0x8b, 0x6a, 0xa2, 0x7e, 0x80, 0x1f,
	0x9b, 0xce, 0xbb, 0xdb, 0x76, 0xd3, 0x4a, 0xf8, 0x8f, 0x4f, 0xf6, 0x4e, 0x96, 0xe4, 0x89, 0xe6,
	0xbb, 0x9e, 0x6d, 0x10, 0xc7, 0xb5, 0x28, 0x81, 0x9f, 0x50, 0xd0, 0xed, 0xa0, 0x5a, 0x08, 0xbb,
	0xb5, 0x26, 0xfc, 0xa4, 0x82, 0xce, 0x4a, 0xc5, 0x64, 0xce, 0x00, 0xd8, 0xb6, 0x89, 0xa9, 0xc1,
	0x4f, 0x29, 0x68, 0x19, 0xdc, 0x9a, 0x45, 0x2d, 0x75, 0xc3, 0xc5, 0xf5, 0xb4, 0x08, 0x80, 0x5f,
	0xcf, 0xc5, 0x97, 0x44, 0x88, 0xcb, 0x8a, 0x06, 0xbf, 0xa1, 0xa0, 0xdb, 0xc0, 0xcd, 0x05, 0xa0,
	0x8d, 0xeb, 0x04, 0x7e, 0x33, 0xa7, 0x72, 0xdc, 0xcb, 0x97, 0x05, 0xbf, 0xa5, 0xa0, 0x17, 0x8c,
	0xdf, 0x1f, 0x92, 0x6e, 0x96, 0x4a, 0xd8, 0xc5, 0xc9, 0x32, 0xe1, 0xf3, 0xb9, 0xa4, 0x13, 0x43,
	0x5b, 0x3a, 0x75, 0x3d, 0x6c, 0x64, 0xd9, 0x6f, 0xe7, 0x6c, 0x10, 0xb3, 0x8e, 0x4d, 0x54, 0x8f,
	0x69, 0xbe, 0x45, 0x7c, 0xd7, 0xda, 0x20, 0x26, 0xfc, 0x4e, 0x2e, 0x02, 0x62, 0xd4, 0xaa, 0xbd,
	0x8c, 0xa8, 0x2e, 0xfc, 0xee, 0x24, 0x1b, 0x79, 0x0e, 0xa1, 0x3c, 0xc3, 0x7e, 0x6f, 0x12, 0x81,
	0xb5, 0x2d, 0xdd, 0xb1, 0xe8, 0x36, 0xfc, 0x3e, 0xbb, 0x62, 0xde, 0x98, 0x21, 0x32, 0xf7, 0xc6,
	0x4f, 0x1f, 0x43, 0xb7, 0x80, 0x53, 0x99, 0xbe, 0xd1, 0xed, 0xef, 0xf1, 0x12, 0x5a, 0x01, 0xb7,
	0x67, 0xba, 0xec, 0x3a, 0xaf, 0x60, 0x45, 0x19, 0xdb, 0x24, 0xa6, 0xeb, 0xc0, 0xab, 0x25, 0xc9,
	0xb2, 0x98, 0xaa, 0x0d, 0x7d, 0x8b, 0x07, 0xa6, 0x6e, 0xc2, 0x7f, 0x2e, 0xa1, 0xd3, 0x60, 0x29,
	0xdb, 0x3d, 0x2a, 0x1a, 0x39, 0xf0, 0x2f, 0xf2, 0x1c, 0xb5, 0x3a, 0xbf, 0xe7, 0x50, 0xbf, 0xa1,
	0xd7, 0x08, 0x35, 0xb1, 0x4b, 0xe0, 0xbf, 0xca, 0x73, 0xa4, 0x0c, 0x17, 0xf1, 0x6f, 0x25, 0x74,
	0x27, 0xb8, 0x2d, 0xd3, 0x3d, 0x56, 0x9d, 0x73, 0xe4, 0xdf, 0xe5, 0x59, 0x92, 0xa3, 0x0d, 0xdb,
	0xb6, 0xb1, 0x2d, 0x98, 0xff, 0x28, 0xc9, 0xa1, 0x18, 0x33, 0x06, 0xf6, 0x98, 0xf7, 0xc6, 0xa2,
	0xfe, 0xb3, 0x84, 0x6e, 0x05, 0x37, 0x8d, 0x19, 0x85, 0xdb, 0x84, 0x77, 0xfe, 0x57, 0x49, 0xda,
	0x0a, 0x16, 0x95, 0x5b, 0x2c, 0xd8, 0x59, 0xde, 0xc6, 0x86, 0x01, 0xff, 0xbb, 0x24, 0xb9, 0xda,
	0x18, 0xe1, 0xb8, 0x94, 0xe0, 0x26, 0xfc, 0x9f, 0x92, 0xe4, 0x13, 0xce, 0xb6, 0x63, 0x58, 0xf5,
	0x7a, 0xa2, 0xc3, 0xff, 0xca, 0x2b, 0x6e, 0xf1, 0x53, 0x5a, 0x25, 0x23, 0xc3, 0xff, 0x9f, 0x6c,
	0x78, 0x2e, 0x9e, 0x98, 0x5a, 0x02, 0xbc, 0x7a, 0xa6, 0x00, 0xc8, 0x9a, 0xf5, 0x35, 0x33, 0xd2,
	0x42, 0xc5, 0x53, 0x01, 0xbf, 0x01, 0xc3, 0x1f, 0xcc, 0x48, 0xe1, 0x16, 0x77, 0x72, 0x01, 0xf0,
	0x87, 0x33, 0x72, 0xd6, 0xd6, 0x6b, 0xf6, 0x66, 0x0b, 0x1b, 0xa9, 0x8e, 0xaa, 0x65, 0x9a, 0xcc,
	0xbb, 0x7f, 0x34, 0x95, 0x8c, 0xff, 0x80, 0x3f, 0x96, 0xf5, 0x75, 0x1c, 0xc3, 0xb7, 0x6c, 0x62,
	0xb2, 0x42, 0x78, 0x8b, 0x50, 0xf8, 0x93, 0x19, 0x29, 0x55, 0x8c, 0x19, 0x85, 0xb7, 0x3b, 0x2e,
	0xa6, 0x2e, 0xfc, 0xe9, 0x8c, 0xb4, 0x05, 0x19, 0xd3, 0xf0, 0xd6, 0x16, 0x36, 0xe0, 0xcf, 0x66,
	0x24, 0x6f, 0xc8, 0x42, 0xfc, 0x22, 0xae, 0x61, 0x17, 0xc3, 0x7f, 0x9a, 0x91, 0x76, 0xa2, 0x56,
	0x8f, 0x2b, 0x25, 0xa7, 0xe1, 0xb9, 0x9a, 0xd5, 0x32, 0xe1, 0x67, 0xca, 0x92, 0x4f, 0x8c, 0x10,
	0xa6, 0x8e, 0x67, 0xc3, 0xcf, 0x96, 0xe5, 0xf0, 0xe4, 0xd7, 0x3a, 0x9e, 0xb9, 0x3e, 0x57, 0x96,
	0x9d, 0x9b, 0x15, 0x4d, 0xac, 0x58, 0xb7, 0x7d, 0xcf, 0xd6, 0x58, 0x78, 0x7c, 0xbe, 0x2c, 0x79,
	0x0b, 0xb9, 0x40, 0x54, 0xcf, 0x25, 0x7e, 0x1d, 0xbb, 0x0d, 0x42, 0xe1, 0x17, 0xca, 0xd2, 0x52,
	0xf8, 0x61, 0x55, 0xc3, 0xae, 0xda, 0x48, 0x0b, 0x6b, 0xb3, 0x0e, 0x9f, 0x2b, 0x4b, 0x66, 0xc9,
	0x60, 0xc4, 0x20, 0x2a, 0x87, 0xbe, 0x58, 0x96, 0x02, 0x29, 0x03, 0x19, 0x16, 0xd6, 0x18, 0xf3,
	0xa5, 0xe2, 0xf9, 0x3c, 0xdd, 0xd0, 0xb2, 0xf3, 0x7d, 0xb9, 0x78, 0x3e, 0x8e, 0xa5, 0xf3, 0x7d,
	0xa5, 0x2c, 0xf9, 0x47, 0x06, 0x62, 0x7f, 0xb2, 0x0b, 0xa2, 0x6e, 0x9a, 0x84, 0xc2, 0xaf, 0x5e,
	0x03, 0x69, 0x79, 0x2e, 0xa1, 0xf0, 0x6b, 0x65, 0xe9, 0x84, 0xe6, 0x64, 0x9d, 0x5a, 0x2d, 0xb1,
	0x10, 0xe2, 0x64, 0xd5, 0xfc, 0x7a, 0x59, 0x4a, 0xfb, 0x79, 0x5a, 0x23, 0xaa, 0xce, 0x57, 0xfe,
	0x8d, 0xe9, 0x6c, 0xba, 0xb2, 0x6f, 0x96, 0xa5, 0x23, 0x37, 0xcf, 0x8a, 0xeb, 0x24, 0x83, 0xbf,
	0x55, 0x96, 0x8a, 0x96, 0x3c, 0x4c, 0x89, 0x8d, 0xa9, 0xab, 0xb3, 0xe3, 0x87, 0x8d, 0x78, 0xfe,
	0x88, 0x45, 0x7a, 0xea, 0x06, 0x71, 0xc7, 0x16, 0xf9, 0xed, 0x23, 0x14, 0x8f, 0xe9, 0x54, 0xf1,
	0xef, 0x94, 0xa5, 0x0a, 0x39, 0xcf, 0x52, 0x22, 0x4a, 0x54, 0x86, 0x7f, 0x57, 0x76, 0xe0, 0x24,
	0xad, 0xf2, 0xf2, 0x98, 0x07, 0xd1, 0xf7, 0xca, 0xb9, 0xd3, 0x32, 0x83, 0x88, 0x37, 0x13, 0xb5,
	0x81, 0xcd, 0x3a, 0x81, 0xdf, 0x2f, 0x4b, 0x49, 0xa9, 0xb9, 0xe9, 0xf3, 0x3c, 0x6f, 0x62, 0x03,
	0xfe, 0x8d, 0x1c, 0x08, 0xcd, 0x4d, 0xdf, 0xf6, 0x5c, 0xbf, 0x49, 0x1c, 0x87, 0xc5, 0xd2, 0xdf,
	0xca, 0x71, 0xd6, 0xdc, 0x4c, 0xd3, 0xcb, 0xdf, 0x95, 0xd1, 0xcd, 0x63, 0xcf, 0x94, 0xcd, 0x4d,
	0x1e, 0xee, 0xf0, 0xef, 0xcb, 0x52, 0x2d, 0x9e, 0x16, 0x31, 0x35, 0xdd, 0x65, 0xd7, 0x2d, 0x47,
	0xc5, 0x26, 0xfc, 0x07, 0xd9, 0x80, 0x29, 0x15, 0xbf, 0xe2, 0x88, 0x07, 0x4d, 0xce, 0xfe, 0x63,
	0x59, 0xca, 0x64, 0x29, 0x2b, 0x36, 0x1c, 0xfe, 0xa0, 0x2c, 0x95, 0xb2, 0xac, 0x14, 0x16, 0x4f,
	0x94, 0x63, 0x81, 0xff, 0x43, 0x59, 0x67, 0x9b, 0x5a, 0x4d, 0xcb, 0x25, 0xf0, 0x47, 0x65, 0x29,
	0x15, 0x16, 0xdc, 0x45, 0x35, 0x6a, 0xd9, 0xf0, 0xc7, 0x72, 0xa8, 0xe6, 0xea, 0x75, 0x8e, 0xfd,
	0xa4, 0x2c, 0x1d, 0xc0, 0x0e, 0x5e, 0x27, 0xe9, 0xcd, 0x13, 0xfe, 0xb4, 0x8c, 0xaa, 0xe0, 0x86,
	0xb1, 0xe3, 0x4a, 0xbc, 0x3a, 0xc0, 0x9f, 0xc9, 0xc6, 0xab, 0x61, 0x87, 0xf0, 0x3b, 0xa8, 0x67,
	0xfb, 0x6e, 0x83, 0x5a, 0xae, 0x6b, 0x10, 0xf8, 0xf4, 0x71, 0x69, 0x3c, 0xab, 0x33, 0x0c, 0x42,
	0x6c, 0xf8, 0xcc, 0x71, 0x69, 0x7c, 0x7a, 0x5a, 0x8a, 0x83, 0x5b, 0x23, 0x06, 0xde, 0x86, 0xcf,
	0x1e, 0x97, 0x0e, 0x23, 0x56, 0xde, 0xe8, 0x06, 0x11, 0x47, 0xd5, 0xeb, 0x2a, 0x72, 0xf5, 0x10,
	0xf7, 0x8a, 0xb3, 0xea, 0xb1, 0x8a, 0x9c, 0x60, 0xb3, 0x8f, 0xa8, 0x5c, 0xc2, 0xeb, 0x8f, 0x44,
	0xd8, 0x62, 0xe1, 0x1b, 0x2a, 0x52, 0xf6, 0xc9, 0x21, 0xc9, 0xa6, 0xbd, 0xb1, 0x22, 0x65, 0xd0,
	0x31, 0x52, 0xe8, 0xf4, 0xa6, 0x8a, 0x14, 0x10, 0x79, 0x26, 0x11, 0xf7, 0xe6, 0x8a, 0xe4, 0xf3,
	0xaa, 0x65, 0x6f, 0x67, 0x74, 0x7f, 0x4b, 0x45, 0x72, 0xb6, 0x51, 0xbf, 0x98, 0xeb, 0xad, 0x15,
	0xe9, 0x78, 0x62, 0x21, 0x29, 0x80, 0xb8, 0xb4, 0x7e, 0x9b, 0x2c, 0x62, 0x44, 0xac, 0x1b, 0x9e,
	0xd3, 0x80, 0x6f, 0x97, 0x17, 0x3f, 0x02, 0xf4, 0x66, 0x93, 0x68, 0x3a, 0x0b, 0x00, 0x6e, 0xa6,
	0x77, 0xc8, 0x8b, 0x1f, 0x91, 0x36, 0x25, 0xeb, 0xc4, 0x55, 0x1b, 0xf0, 0x71, 0x79, 0x45, 0x23,
	0x86, 0xaf, 0xe8, 0xea, 0xe4, 0x7e, 0x3e, 0xc7, 0x13, 0x93, 0xe7, 0x88, 0xdf, 0x26, 0x08, 0x7c,
	0xe7, 0xe4, 0x25, 0x09, 0xab, 0xbc, 0xab, 0x22, 0x1d, 0x4e, 0x9a, 0xd3, 0x64, 0xfd, 0x86, 0xff,
	0x72, 0x42, 0xad, 0x18, 0x7a, 0xb2, 0x22, 0xdf, 0x9a, 0xd8, 0xb5, 0x91, 0x4b, 0xc1, 0x9a, 0xe6,
	0x5a, 0x4c, 0xa8, 0xa6, 0x53, 0xa1, 0xf6, 0xbb, 0xaf, 0x11, 0xe6, 0x6b, 0x78, 0x4f, 0x45, 0xbe,
	0x44, 0x16, 0xc3, 0x42, 0x8f, 0xf7, 0x56, 0x72, 0x95, 0x6b, 0x42, 0xc7, 0xd9, 0x87, 0x6b, 0xf0,
	0xbe, 0xa9, 0x18, 0x9f, 0xfb, 0xa9, 0x8a, 0x7c, 0x91, 0x96, 0x31, 0x31, 0xeb, 0xfb, 0x2b, 0xf2,
	0x4b, 0x49, 0xca, 0x51, 0xc2, 0x4b, 0xf0, 0xb1, 0xf5, 0x7f, 0xa0, 0x22, 0xbf, 0x41, 0xa4, 0xaf,
	0x4b, 0xc2, 0xa1, 0x33, 0xbf, 0x49, 0x70, 0x3d, 0x3e, 0x98, 0xb7, 0xc1, 0xf8, 0x80, 0xe4, 0x81,
	0x98, 0xd3, 0x1f, 0xca, 0x6b, 0x53, 0x4c, 0x0b, 0xe5, 0x3f, 0x5c, 0x91, 0x5f, 0x58, 0x24, 0x9c,
	0x0b, 0x7d, 0x5a, 0x76, 0x6c, 0x99, 0x4a, 0x1d, 0xea, 0x99, 0xca, 0x84, 0xcb, 0x43, 0x42, 0x8a,
	0x69, 0x9f, 0x95, 0x33, 0x49, 0xf6, 0xb5, 0x5b, 0xd8, 0xe9, 0x23, 0x47, 0x22, 0x5c, 0xad, 0x8f,
	0xca, 0x1e, 0x3e, 0x86, 0x88, 0x99, 0x3e, 0x56, 0xc9, 0xdd, 0x33, 0x2c, 0xaa, 0xa5, 0x2f, 0x57,
	0x62, 0xae, 0x8f, 0x57, 0x72, 0xe9, 0x75, 0x0c, 0x12, 0xa2, 0x3e, 0x21, 0x6f, 0x44, 0x42, 0x25,
	0x6b, 0x4c, 0x4c, 0xcb, 0x65, 0x7e, 0xb2, 0x32, 0xed, 0x48, 0xe1, 0xd8, 0xa7, 0xe4, 0xfd, 0x2a,
	0xc0, 0xf8, 0x73, 0x83, 0x58, 0xf2, 0x6f, 0x4f, 0x95, 0xca, 0xb1, 0xdf, 0x91, 0x7d, 0x37, 0x87,
	0x89, 0x25, 0x7d, 0x5a, 0x8e, 0x7f, 0xc7, 0xa0, 0x9e, 0xc8, 0x66, 0x42, 0xd0, 0xef, 0x56, 0xa4,
	0x5b, 0x31, 0x07, 0xb8, 0xe6, 0xbf, 0x57, 0xd8, 0xc5, 0x47, 0xfd, 0x7e, 0x45, 0x2a, 0x30, 0x78,
	0x97, 0x98, 0xf2, 0x0f, 0xe4, 0xb4, 0xc5, 0x8e, 0x4f, 0x51, 0x9e, 0x72, 0xb1, 0x7f, 0x38, 0xb9,
	0x9f, 0xcb, 0xfe, 0xa3, 0x9c, 0xca, 0x69, 0xbf, 0x98, 0xe0, 0x8f, 0x2b, 0x52, 0x09, 0xe2, 0xea,
	0x4d, 0x62, 0xe8, 0x26, 0xf1, 0x1b, 0x3a, 0xb3, 0xe4, 0x76, 0x26, 0x47, 0xfe, 0x89, 0x9c, 0x8c,
	0x8a, 0x59, 0x21, 0xf8, 0x4f, 0x65, 0xdb, 0xe7, 0x60, 0xbe, 0x80, 0x3f, 0x9b, 0x8a, 0xf1, 0xa9,
	0xff, 0x5c, 0xde, 0xa2, 0x1c, 0x26, 0x66, 0xfd, 0x0b, 0xd9, 0xc9, 0xdd, 0x96, 0x25, 0x7e, 0x44,
	0x1b, 0x1d, 0x05, 0x7f, 0x79, 0x34, 0xc3, 0xe7, 0xfb, 0x2b, 0x39, 0x10, 0xc6, 0x19, 0x31, 0xd9,
	0x5f, 0xcb, 0xc9, 0xa9, 0x85, 0x8d, 0xf8, 0xb2, 0x57, 0xbc, 0xd8, 0xcf, 0xc8, 0x33, 0xf3, 0x1f,
	0x73, 0x2d, 0xcb, 0x75, 0x5c, 0x9a, 0x84, 0xe9, 0x67, 0x2b, 0x05, 0xf7, 0xcc, 0x11, 0x23, 0x66,
	0xfe, 0x9c, 0x5c, 0x9d, 0x30, 0x88, 0x9f, 0xd1, 0x7c, 0x9e, 0xcf, 0x4f, 0xec, 0xe6, 0x53, 0x7c,
	0x41, 0x76, 0x9a, 0xb4, 0x5b, 0x48, 0x7f, 0xae, 0x68, 0x38, 0xff, 0xfd, 0x8f, 0x0f, 0xff, 0x62,
	0xd1, 0x70, 0xde, 0x2d, 0x86, 0x7f, 0xa9, 0x22, 0x15, 0x66, 0xad, 0xf8, 0x17, 0x70, 0xf8, 0xe5,
	0xa2, 0x1e, 0x2e, 0xf3, 0x2b, 0xf2, 0xfe, 0x26, 0x3d, 0x7e, 0x93, 0xb8, 0x0d, 0x4b, 0xf3, 0xb1,
	0xe3, 0xe8, 0x75, 0x13, 0x7e, 0x55, 0x0e, 0xa3, 0xf4, 0xfd, 0x01, 0x7e, 0xad, 0x22, 0xd5, 0x73,
	0xba, 0x25, 0x7e, 0x17, 0xe1, 0x13, 0x3c, 0x6e, 0xb2, 0xaa, 0x17, 0x7b, 0xd4, 0xa2, 0x98, 0x2b,
	0x93, 0x3c, 0x58, 0x5c, 0x35, 0x99, 0x4e, 0x49, 0x87, 0x67, 0xc6, 0x3f, 0x88, 0xe8, 0x26, 0x7c,
	0xc2, 0x5c, 0x99, 0x99, 0x6d, 0xc3, 0xf6, 0xca, 0x73, 0xc7, 0xc0, 0x2d, 0x13, 0x3f, 0xba, 0x42,
	0xf7, 0x80, 0xc5, 0xf8, 0xc3, 0x2a, 0xe9, 0x3b, 0xa7, 0x93, 0xa2, 0x59, 0x4f, 0xbe, 0x76, 0xca,
	0x7e, 0xb9, 0x74, 0x6c, 0xfc, 0xcb, 0x25, 0xf9, 0x7b, 0xa4, 0x52, 0xfe, 0x7b, 0xa4, 0x3b, 0xc1,
	0xfc, 0x20, 0xdc, 0x13, 0x1f, 0x0b, 0x8d, 0xbe, 0x7d, 0x9a, 0x4b, 0xda, 0x18, 0x72, 0x16, 0xc0,
	0xe4, 0xb3, 0x93, 0x54, 0x95, 0x32, 0x57, 0x65, 0x31, 0x6e, 0x4f, 0x75, 0x79, 0x08, 0x00, 0xfe,
	0x39, 0x4e, 0xd8, 0xf6, 0x83, 0x88, 0x7f, 0xfe, 0x34, 0xe5, 0x7b, 0x9e, 0x98, 0xc6, 0x11, 0xba,
	0x03, 0x80, 0xe0, 0x20, 0xea, 0x89, 0xc5, 0xc5, 0x5f, 0x45, 0x65, 0x5a, 0xd0, 0x29, 0x50, 0x8e,
	0x7a, 0xc1, 0x30, 0xe2, 0x1f, 0x44, 0xcd, 0x52, 0xf1, 0xcf, 0xca, 0x53, 0x33, 0xe0, 0xe6, 0x09,
	0x1f, 0x92, 0x5d, 0xbb, 0x05, 0x4d, 0x50, 0xee, 0xef, 0x06, 0xc3, 0x90, 0x9b, 0xef, 0xe4, 0xf9,
	0x07, 0x7f, 0x9e, 0xcf, 0xd5, 0x92, 0x76, 0x36, 0x9e, 0x0a, 0x31, 0xe8, 0x0c, 0x58, 0xdc, 0x0d,
	0x83, 0xbe, 0x7f, 0x71, 0xef, 0x91, 0xa1, 0x1f, 0xf5, 0xa2, 0x60, 0x8f, 0x5b, 0xbe, 0x44, 0x17,
	0x58, 0x73, 0x6d, 0xef, 0x91, 0xa1, 0xcb, 0x1a, 0xd1, 0xbd, 0xe0, 0xfa, 0x11, 0x37, 0xdc, 0x09,
	0xba, 0xdd, 0xb0, 0xcd, 0x37, 0xa0, 0x44, 0x17, 0x13, 0xd2, 0x11, 0xcd, 0xe8, 0x1c, 0x40, 0x23,
	0x56, 0xe8, 0x1f, 0xb6, 0xf9, 0x36, 0x94, 0x28, 0x4c, 0xe0, 0xad, 0xb8, 0x9d, 0xd1, 0x9d, 0x6e,
	0x3b, 0x3c, 0x8c, 0x49, 0x7f, 0xa7, 0x77, 0xd0, 0x15, 0xfb, 0x51, 0xa2, 0x90, 0xf7, 0x08, 0x54,
	0x65, 0xed, 0x4c, 0xdf, 0xfd, 0xe0, 0xd0, 0x6f, 0x87, 0x41, 0xdb, 0x8f, 0x0e, 0xfa, 0x7b, 0xe1,
	0x90, 0xdb, 0xbf, 0x44, 0x17, 0xf6, 0x83, 0x43, 0x2d, 0x0c, 0xda, 0x2e, 0x6f, 0x64, 0x5c, 0xf7,
	0x60, 0x7f, 0x8c, 0x9b, 0x15, 0x5c, 0xf7, 0x60, 0x7f, 0xc4, 0xad, 0x3c, 0xa6, 0x80, 0xb9, 0x8c,
	0x59, 0x10, 0x04, 0xf3, 0x2c, 0x8e, 0xf9, 0x4f, 0xcc, 0xec, 0x16, 0x7e, 0x1d, 0x5a, 0x00, 0x27,
	0xf8, 0x6f, 0xef, 0x0d, 0x82, 0x6d, 0xa8, 0x30, 0x20, 0x7e, 0x86, 0xe5, 0x37, 0x53, 0x78, 0x0c,
	0x2d, 0x82, 0xb9, 0xb8, 0x85, 0x23, 0x25, 0x74, 0x3d, 0x58, 0x10, 0xb7, 0x56, 0xd5, 0x20, 0xd8,
	0xf4, 0x6c, 0x38, 0x83, 0xe6, 0xc1, 0x6c, 0x5a, 0xf2, 0x94, 0x19, 0xb0, 0xae, 0x9b, 0x2c, 0xe3,
	0xc4, 0xc0, 0xf1, 0x8b, 0xc7, 0xb9, 0xc7, 0xbd, 0xe4, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7b,
	0xc9, 0x58, 0xa1, 0x22, 0x2a, 0x00, 0x00,
}
