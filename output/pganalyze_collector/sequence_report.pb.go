// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sequence_report.proto

package pganalyze_collector

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SequenceReportData struct {
	DatabaseReferences       []*DatabaseReference       `protobuf:"bytes,10,rep,name=database_references,json=databaseReferences,proto3" json:"database_references,omitempty"`
	SequenceReferences       []*SequenceReference       `protobuf:"bytes,11,rep,name=sequence_references,json=sequenceReferences,proto3" json:"sequence_references,omitempty"`
	RelationReferences       []*RelationReference       `protobuf:"bytes,12,rep,name=relation_references,json=relationReferences,proto3" json:"relation_references,omitempty"`
	SequenceInformations     []*SequenceInformation     `protobuf:"bytes,20,rep,name=sequence_informations,json=sequenceInformations,proto3" json:"sequence_informations,omitempty"`
	SerialColumnInformations []*SerialColumnInformation `protobuf:"bytes,21,rep,name=serial_column_informations,json=serialColumnInformations,proto3" json:"serial_column_informations,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                   `json:"-"`
	XXX_unrecognized         []byte                     `json:"-"`
	XXX_sizecache            int32                      `json:"-"`
}

func (m *SequenceReportData) Reset()         { *m = SequenceReportData{} }
func (m *SequenceReportData) String() string { return proto.CompactTextString(m) }
func (*SequenceReportData) ProtoMessage()    {}
func (*SequenceReportData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8e29a23aaf9cb82, []int{0}
}

func (m *SequenceReportData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SequenceReportData.Unmarshal(m, b)
}
func (m *SequenceReportData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SequenceReportData.Marshal(b, m, deterministic)
}
func (m *SequenceReportData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequenceReportData.Merge(m, src)
}
func (m *SequenceReportData) XXX_Size() int {
	return xxx_messageInfo_SequenceReportData.Size(m)
}
func (m *SequenceReportData) XXX_DiscardUnknown() {
	xxx_messageInfo_SequenceReportData.DiscardUnknown(m)
}

var xxx_messageInfo_SequenceReportData proto.InternalMessageInfo

func (m *SequenceReportData) GetDatabaseReferences() []*DatabaseReference {
	if m != nil {
		return m.DatabaseReferences
	}
	return nil
}

func (m *SequenceReportData) GetSequenceReferences() []*SequenceReference {
	if m != nil {
		return m.SequenceReferences
	}
	return nil
}

func (m *SequenceReportData) GetRelationReferences() []*RelationReference {
	if m != nil {
		return m.RelationReferences
	}
	return nil
}

func (m *SequenceReportData) GetSequenceInformations() []*SequenceInformation {
	if m != nil {
		return m.SequenceInformations
	}
	return nil
}

func (m *SequenceReportData) GetSerialColumnInformations() []*SerialColumnInformation {
	if m != nil {
		return m.SerialColumnInformations
	}
	return nil
}

type SequenceReference struct {
	DatabaseIdx          int32    `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	SchemaName           string   `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	SequenceName         string   `protobuf:"bytes,3,opt,name=sequence_name,json=sequenceName,proto3" json:"sequence_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SequenceReference) Reset()         { *m = SequenceReference{} }
func (m *SequenceReference) String() string { return proto.CompactTextString(m) }
func (*SequenceReference) ProtoMessage()    {}
func (*SequenceReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8e29a23aaf9cb82, []int{1}
}

func (m *SequenceReference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SequenceReference.Unmarshal(m, b)
}
func (m *SequenceReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SequenceReference.Marshal(b, m, deterministic)
}
func (m *SequenceReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequenceReference.Merge(m, src)
}
func (m *SequenceReference) XXX_Size() int {
	return xxx_messageInfo_SequenceReference.Size(m)
}
func (m *SequenceReference) XXX_DiscardUnknown() {
	xxx_messageInfo_SequenceReference.DiscardUnknown(m)
}

var xxx_messageInfo_SequenceReference proto.InternalMessageInfo

func (m *SequenceReference) GetDatabaseIdx() int32 {
	if m != nil {
		return m.DatabaseIdx
	}
	return 0
}

func (m *SequenceReference) GetSchemaName() string {
	if m != nil {
		return m.SchemaName
	}
	return ""
}

func (m *SequenceReference) GetSequenceName() string {
	if m != nil {
		return m.SequenceName
	}
	return ""
}

type SequenceInformation struct {
	SequenceIdx          int32    `protobuf:"varint,1,opt,name=sequence_idx,json=sequenceIdx,proto3" json:"sequence_idx,omitempty"`
	LastValue            int64    `protobuf:"varint,2,opt,name=last_value,json=lastValue,proto3" json:"last_value,omitempty"`
	StartValue           int64    `protobuf:"varint,3,opt,name=start_value,json=startValue,proto3" json:"start_value,omitempty"`
	IncrementBy          int64    `protobuf:"varint,4,opt,name=increment_by,json=incrementBy,proto3" json:"increment_by,omitempty"`
	MaxValue             int64    `protobuf:"varint,5,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	MinValue             int64    `protobuf:"varint,6,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	CacheValue           int64    `protobuf:"varint,7,opt,name=cache_value,json=cacheValue,proto3" json:"cache_value,omitempty"`
	IsCycled             bool     `protobuf:"varint,8,opt,name=is_cycled,json=isCycled,proto3" json:"is_cycled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SequenceInformation) Reset()         { *m = SequenceInformation{} }
func (m *SequenceInformation) String() string { return proto.CompactTextString(m) }
func (*SequenceInformation) ProtoMessage()    {}
func (*SequenceInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8e29a23aaf9cb82, []int{2}
}

func (m *SequenceInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SequenceInformation.Unmarshal(m, b)
}
func (m *SequenceInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SequenceInformation.Marshal(b, m, deterministic)
}
func (m *SequenceInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequenceInformation.Merge(m, src)
}
func (m *SequenceInformation) XXX_Size() int {
	return xxx_messageInfo_SequenceInformation.Size(m)
}
func (m *SequenceInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_SequenceInformation.DiscardUnknown(m)
}

var xxx_messageInfo_SequenceInformation proto.InternalMessageInfo

func (m *SequenceInformation) GetSequenceIdx() int32 {
	if m != nil {
		return m.SequenceIdx
	}
	return 0
}

func (m *SequenceInformation) GetLastValue() int64 {
	if m != nil {
		return m.LastValue
	}
	return 0
}

func (m *SequenceInformation) GetStartValue() int64 {
	if m != nil {
		return m.StartValue
	}
	return 0
}

func (m *SequenceInformation) GetIncrementBy() int64 {
	if m != nil {
		return m.IncrementBy
	}
	return 0
}

func (m *SequenceInformation) GetMaxValue() int64 {
	if m != nil {
		return m.MaxValue
	}
	return 0
}

func (m *SequenceInformation) GetMinValue() int64 {
	if m != nil {
		return m.MinValue
	}
	return 0
}

func (m *SequenceInformation) GetCacheValue() int64 {
	if m != nil {
		return m.CacheValue
	}
	return 0
}

func (m *SequenceInformation) GetIsCycled() bool {
	if m != nil {
		return m.IsCycled
	}
	return false
}

type SerialColumnInformation struct {
	SequenceIdx          int32                                    `protobuf:"varint,1,opt,name=sequence_idx,json=sequenceIdx,proto3" json:"sequence_idx,omitempty"`
	RelationIdx          int32                                    `protobuf:"varint,2,opt,name=relation_idx,json=relationIdx,proto3" json:"relation_idx,omitempty"`
	ColumnName           string                                   `protobuf:"bytes,3,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	DataType             string                                   `protobuf:"bytes,10,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	MaximumValue         uint64                                   `protobuf:"varint,11,opt,name=maximum_value,json=maximumValue,proto3" json:"maximum_value,omitempty"`
	ForeignColumns       []*SerialColumnInformation_ForeignColumn `protobuf:"bytes,20,rep,name=foreign_columns,json=foreignColumns,proto3" json:"foreign_columns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *SerialColumnInformation) Reset()         { *m = SerialColumnInformation{} }
func (m *SerialColumnInformation) String() string { return proto.CompactTextString(m) }
func (*SerialColumnInformation) ProtoMessage()    {}
func (*SerialColumnInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8e29a23aaf9cb82, []int{3}
}

func (m *SerialColumnInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SerialColumnInformation.Unmarshal(m, b)
}
func (m *SerialColumnInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SerialColumnInformation.Marshal(b, m, deterministic)
}
func (m *SerialColumnInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerialColumnInformation.Merge(m, src)
}
func (m *SerialColumnInformation) XXX_Size() int {
	return xxx_messageInfo_SerialColumnInformation.Size(m)
}
func (m *SerialColumnInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_SerialColumnInformation.DiscardUnknown(m)
}

var xxx_messageInfo_SerialColumnInformation proto.InternalMessageInfo

func (m *SerialColumnInformation) GetSequenceIdx() int32 {
	if m != nil {
		return m.SequenceIdx
	}
	return 0
}

func (m *SerialColumnInformation) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

func (m *SerialColumnInformation) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *SerialColumnInformation) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *SerialColumnInformation) GetMaximumValue() uint64 {
	if m != nil {
		return m.MaximumValue
	}
	return 0
}

func (m *SerialColumnInformation) GetForeignColumns() []*SerialColumnInformation_ForeignColumn {
	if m != nil {
		return m.ForeignColumns
	}
	return nil
}

type SerialColumnInformation_ForeignColumn struct {
	RelationIdx  int32  `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx,proto3" json:"relation_idx,omitempty"`
	ColumnName   string `protobuf:"bytes,2,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	DataType     string `protobuf:"bytes,10,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	MaximumValue uint64 `protobuf:"varint,11,opt,name=maximum_value,json=maximumValue,proto3" json:"maximum_value,omitempty"`
	// True if the relationship has been determined based on names alone, instead of an actual FK constraint
	Inferred             bool     `protobuf:"varint,12,opt,name=inferred,proto3" json:"inferred,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SerialColumnInformation_ForeignColumn) Reset()         { *m = SerialColumnInformation_ForeignColumn{} }
func (m *SerialColumnInformation_ForeignColumn) String() string { return proto.CompactTextString(m) }
func (*SerialColumnInformation_ForeignColumn) ProtoMessage()    {}
func (*SerialColumnInformation_ForeignColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8e29a23aaf9cb82, []int{3, 0}
}

func (m *SerialColumnInformation_ForeignColumn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SerialColumnInformation_ForeignColumn.Unmarshal(m, b)
}
func (m *SerialColumnInformation_ForeignColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SerialColumnInformation_ForeignColumn.Marshal(b, m, deterministic)
}
func (m *SerialColumnInformation_ForeignColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerialColumnInformation_ForeignColumn.Merge(m, src)
}
func (m *SerialColumnInformation_ForeignColumn) XXX_Size() int {
	return xxx_messageInfo_SerialColumnInformation_ForeignColumn.Size(m)
}
func (m *SerialColumnInformation_ForeignColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_SerialColumnInformation_ForeignColumn.DiscardUnknown(m)
}

var xxx_messageInfo_SerialColumnInformation_ForeignColumn proto.InternalMessageInfo

func (m *SerialColumnInformation_ForeignColumn) GetRelationIdx() int32 {
	if m != nil {
		return m.RelationIdx
	}
	return 0
}

func (m *SerialColumnInformation_ForeignColumn) GetColumnName() string {
	if m != nil {
		return m.ColumnName
	}
	return ""
}

func (m *SerialColumnInformation_ForeignColumn) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *SerialColumnInformation_ForeignColumn) GetMaximumValue() uint64 {
	if m != nil {
		return m.MaximumValue
	}
	return 0
}

func (m *SerialColumnInformation_ForeignColumn) GetInferred() bool {
	if m != nil {
		return m.Inferred
	}
	return false
}

func init() {
	proto.RegisterType((*SequenceReportData)(nil), "pganalyze.collector.SequenceReportData")
	proto.RegisterType((*SequenceReference)(nil), "pganalyze.collector.SequenceReference")
	proto.RegisterType((*SequenceInformation)(nil), "pganalyze.collector.SequenceInformation")
	proto.RegisterType((*SerialColumnInformation)(nil), "pganalyze.collector.SerialColumnInformation")
	proto.RegisterType((*SerialColumnInformation_ForeignColumn)(nil), "pganalyze.collector.SerialColumnInformation.ForeignColumn")
}

func init() { proto.RegisterFile("sequence_report.proto", fileDescriptor_c8e29a23aaf9cb82) }

var fileDescriptor_c8e29a23aaf9cb82 = []byte{
	// 562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x95, 0xe3, 0xb6, 0x9f, 0x73, 0xed, 0x7e, 0x08, 0xb7, 0x15, 0x56, 0x2a, 0x44, 0x1a, 0x24,
	0xe4, 0x05, 0xca, 0x02, 0x76, 0x2c, 0x69, 0x85, 0xd4, 0x0d, 0x8b, 0x01, 0xc1, 0x0a, 0x59, 0x93,
	0xf1, 0xa4, 0x19, 0xe4, 0x19, 0x87, 0x19, 0x07, 0xd9, 0x88, 0xb7, 0xe0, 0x49, 0x78, 0x1e, 0xde,
	0x80, 0xa7, 0x40, 0xf3, 0x63, 0xc7, 0x4d, 0xd2, 0x00, 0x0b, 0x96, 0x73, 0xce, 0xb9, 0xe7, 0xfe,
	0xda, 0x70, 0xa6, 0xe8, 0xa7, 0x15, 0x15, 0x84, 0x66, 0x92, 0x2e, 0x4b, 0x59, 0x4d, 0x97, 0xb2,
	0xac, 0xca, 0xf8, 0x64, 0x79, 0x83, 0x05, 0x2e, 0x9a, 0x2f, 0x74, 0x4a, 0xca, 0xa2, 0xa0, 0xa4,
	0x2a, 0xe5, 0x28, 0x52, 0x0b, 0x2c, 0x69, 0x6e, 0x25, 0x93, 0x9f, 0x3e, 0xc4, 0x6f, 0x5c, 0x30,
	0x32, 0xb1, 0x57, 0xb8, 0xc2, 0xf1, 0x7b, 0x38, 0xc9, 0x71, 0x85, 0x67, 0x58, 0x69, 0xcb, 0x39,
	0x95, 0x9a, 0x57, 0x09, 0x8c, 0xfd, 0x34, 0x7c, 0xf6, 0x64, 0xba, 0xc3, 0x77, 0x7a, 0xe5, 0xf4,
	0xa8, 0x95, 0xa3, 0x38, 0xdf, 0x84, 0x94, 0x36, 0xee, 0xd5, 0xda, 0x19, 0x87, 0x7b, 0x8c, 0xd7,
	0xe5, 0x75, 0xc6, 0x6a, 0x13, 0x32, 0xc6, 0x92, 0x16, 0xb8, 0x62, 0xa5, 0xe8, 0x1b, 0x47, 0x7b,
	0x8c, 0x91, 0xd3, 0xf7, 0x8c, 0xe5, 0x26, 0xa4, 0xe2, 0x0f, 0xbd, 0xe9, 0x32, 0x31, 0x2f, 0x25,
	0x37, 0x0a, 0x95, 0x9c, 0x1a, 0xeb, 0x74, 0x6f, 0xcd, 0xd7, 0xeb, 0x00, 0x74, 0xaa, 0xb6, 0x41,
	0x15, 0x7f, 0x84, 0x91, 0xa2, 0x92, 0xe1, 0x22, 0x23, 0x65, 0xb1, 0xe2, 0xe2, 0x76, 0x8e, 0x33,
	0x93, 0xe3, 0xe9, 0x1d, 0x39, 0x74, 0xd8, 0xa5, 0x89, 0xea, 0xe7, 0x49, 0xd4, 0x6e, 0x42, 0x4d,
	0xbe, 0xc2, 0xfd, 0xad, 0x61, 0xc6, 0x17, 0x10, 0x75, 0xab, 0x66, 0x79, 0x9d, 0x78, 0x63, 0x2f,
	0x3d, 0x44, 0x61, 0x8b, 0x5d, 0xe7, 0x75, 0xfc, 0x08, 0x42, 0x45, 0x16, 0x94, 0xe3, 0x4c, 0x60,
	0x4e, 0x93, 0xc1, 0xd8, 0x4b, 0x87, 0x08, 0x2c, 0xf4, 0x1a, 0x73, 0x1a, 0x3f, 0x86, 0xe3, 0x6e,
	0x46, 0x46, 0xe2, 0x1b, 0x49, 0xd4, 0x82, 0x5a, 0x34, 0xf9, 0x36, 0x80, 0x93, 0x1d, 0x73, 0xd1,
	0x05, 0xac, 0x07, 0xbc, 0x2e, 0xa0, 0x9b, 0x56, 0x5e, 0xc7, 0x0f, 0x01, 0x0a, 0xac, 0xaa, 0xec,
	0x33, 0x2e, 0x56, 0x36, 0xbf, 0x8f, 0x86, 0x1a, 0x79, 0xa7, 0x01, 0x53, 0x5f, 0x85, 0x65, 0xcb,
	0xfb, 0x86, 0x07, 0x03, 0x59, 0xc1, 0x05, 0x44, 0x4c, 0x10, 0x49, 0x39, 0x15, 0x55, 0x36, 0x6b,
	0x92, 0x03, 0xa3, 0x08, 0x3b, 0xec, 0x65, 0x13, 0x9f, 0xc3, 0x90, 0xe3, 0xda, 0x39, 0x1c, 0x1a,
	0x3e, 0xe0, 0xb8, 0xb6, 0xf1, 0x9a, 0x64, 0xc2, 0x91, 0x47, 0x8e, 0x64, 0xa2, 0xcb, 0x4e, 0x30,
	0x59, 0x50, 0x47, 0xff, 0x67, 0xb3, 0x1b, 0xa8, 0x8b, 0x66, 0x2a, 0x23, 0x0d, 0x29, 0x68, 0x9e,
	0x04, 0x63, 0x2f, 0x0d, 0x50, 0xc0, 0xd4, 0xa5, 0x79, 0x4f, 0x7e, 0xf8, 0xf0, 0xe0, 0x8e, 0x4d,
	0xfe, 0xc9, 0x64, 0x2e, 0x20, 0xea, 0xce, 0x5e, 0x4b, 0x06, 0x56, 0xd2, 0x62, 0x6e, 0x7b, 0xee,
	0xb4, 0x7a, 0xab, 0x01, 0x0b, 0x99, 0xed, 0x9d, 0xc3, 0x50, 0x6f, 0x3b, 0xab, 0x9a, 0x25, 0x4d,
	0xc0, 0xd0, 0x81, 0x06, 0xde, 0x36, 0x4b, 0xb3, 0x5a, 0x8e, 0x6b, 0xc6, 0x57, 0xdc, 0xf5, 0x17,
	0x8e, 0xbd, 0xf4, 0x00, 0x45, 0x0e, 0xb4, 0x1d, 0x12, 0xb8, 0x37, 0x2f, 0x25, 0x65, 0x37, 0xc2,
	0x5d, 0x71, 0xfb, 0x75, 0xbc, 0xf8, 0x9b, 0xcb, 0x9d, 0xbe, 0xb2, 0x1e, 0x96, 0x40, 0xff, 0xcf,
	0xfb, 0x4f, 0x35, 0xfa, 0xee, 0xc1, 0xf1, 0x2d, 0xc5, 0x56, 0xf3, 0xde, 0x6f, 0x9b, 0x1f, 0xfc,
	0x83, 0xe6, 0x47, 0x10, 0x30, 0x31, 0xa7, 0x52, 0xd2, 0x3c, 0x89, 0xdc, 0x76, 0xdd, 0x7b, 0x76,
	0x64, 0xfe, 0xb2, 0xcf, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xe8, 0xf8, 0x2f, 0x3d, 0xa1, 0x05,
	0x00, 0x00,
}
